// Accord Statistics Library
// The Accord.NET Framework
// http://accord-framework.net
//
// Copyright © César Souza, 2009-2015
// cesarsouza at gmail.com
//
//    This library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    This library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with this library; if not, write to the Free Software
//    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
//

namespace Accord.MachineLearning
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Accord.Math;

    /// <summary>
    ///   Base class for multi-class and multi-label classifiers.
    /// </summary>
    /// 
    /// <typeparam name="TInput">The data type for the input data. Default is double[].</typeparam>
    /// <typeparam name="TClasses">The data type for the classes. Default is int.</typeparam>
    /// <typeparam name="TScores">The data type for the output data generated by the model. Default is double.</typeparam>
    /// 
    [Serializable]
    public abstract class BaseClassifier<TInput, TClasses, TScores>
        : BaseTransform<TInput, TScores[]>, IClassifier<TInput, TClasses, TScores>
    {
        /// <summary>
        ///   Computes a class-label decision for a given <paramref name="input"/>.
        /// </summary>
        /// 
        /// <param name="input">The input vector that should be classified into
        ///   one of the <see cref="ITransform{TInput, TScores}.NumberOfOutputs"/> possible classes.</param>
        /// 
        /// <returns>A class-label that best described <paramref name="input"/> according
        /// to this classifier.</returns>
        /// 
        public abstract TClasses Decide(TInput input);

        /// <summary>
        ///   Computes class-label decisions for a given set of <paramref name="input"/> vectors.
        /// </summary>
        /// 
        /// <param name="input">The input vectors that should be classified into
        ///   one of the <see cref="ITransform{TInput, TScores}.NumberOfOutputs"/> possible classes.</param>
        /// 
        /// <returns>The class-labels that best described each <paramref name="input"/>
        /// vector according to this classifier.</returns>
        /// 
        public virtual TClasses[] Decide(TInput[] input)
        {
            return Decide(input, new TClasses[input.Length]);
        }


        /// <summary>
        ///  Computes a class-label decision for a given <paramref name="input" />.
        /// 
        /// </summary>
        /// <param name="input">The input vector that should be classified into
        ///   one of the <see cref="ITransform{TInput, TScores}.NumberOfOutputs" /> possible classes.</param>
        /// <param name="result"></param>
        /// 
        /// <returns>
        ///   A class-label that best described <paramref name="input" /> according
        ///   to this classifier.
        /// </returns>
        public virtual TClasses[] Decide(TInput[] input, TClasses[] result)
        {
            for (int i = 0; i < input.Length; i++)
                result[i] = Decide(input[i]);
            return result;
        }
    }

    /// <summary>
    ///   Base class for multi-class classifiers.
    /// </summary>
    /// 
    /// <typeparam name="TInput">The data type for the input data. Default is double[].</typeparam>
    /// <typeparam name="TScores">The data type for the output data generated by the model. Default is double.</typeparam>
    /// 
    [Serializable]
    public abstract class BaseClassifier<TInput, TScores> : BaseClassifier<TInput, int, TScores>
    {
        /// <summary>
        ///   Applies the transformation to an input, producing an associated output.
        /// </summary>
        /// 
        /// <param name="input">The input data to which the transformation should be applied.</param>
        /// 
        /// <returns>
        ///   The output generated by applying this transformation to the given input.
        /// </returns>
        /// 
        public override TScores[] Transform(TInput input)
        {
            return Vector.OneHot<TScores>(Decide(input), NumberOfOutputs);
        }

        /// <summary>
        ///   Applies the transformation to a set of input vectors,
        ///   producing an associated set of output vectors.
        /// </summary>
        /// 
        /// <param name="input">The input data to which
        ///   the transformation should be applied.</param>
        /// 
        /// <returns>The output generated by applying this
        ///   transformation to the given input.</returns>
        /// 
        public override TScores[][] Transform(TInput[] input)
        {
            return Jagged.OneHot<TScores>(Decide(input), NumberOfOutputs);
        }

        /// <summary>
        ///   Applies the transformation to a set of input vectors,
        ///   producing an associated set of output vectors.
        /// </summary>
        /// 
        /// <param name="input">The input data to which
        ///   the transformation should be applied.</param>
        /// <param name="result">The location to where to store the
        ///   result of this transformation.</param>
        /// 
        /// <returns>The output generated by applying this
        ///   transformation to the given input.</returns>
        /// 
        public override TScores[] Transform(TInput input, TScores[] result)
        {
            return Vector.OneHot<TScores>(Decide(input), NumberOfOutputs, result);
        }

        /// <summary>
        ///   Applies the transformation to an input, producing an associated output.
        /// </summary>
        /// 
        /// <param name="input">The input data to which the transformation should be applied.</param>
        /// <param name="result">The location to where to store the result of this transformation.</param>
        /// 
        /// <returns>The output generated by applying this transformation to the given input.</returns>
        /// 
        public override TScores[][] Transform(TInput[] input, TScores[][] result)
        {
            return Jagged.OneHot<TScores>(Decide(input), NumberOfOutputs, result);
        }
    }

    /// <summary>
    ///   Base class for multi-class classifiers.
    /// </summary>
    /// 
    /// <typeparam name="TInput">The data type for the input data. Default is double[].</typeparam>
    /// 
    [Serializable]
    public abstract class BaseClassifier<TInput> : BaseClassifier<TInput, double>
    {
        /// <summary>
        ///   Applies the transformation to a set of input vectors,
        ///   producing an associated set of output vectors.
        /// </summary>
        /// 
        /// <param name="input">The input data to which
        ///   the transformation should be applied.</param>
        /// 
        /// <returns>The output generated by applying this
        ///   transformation to the given input.</returns>
        /// 
        public override double[] Transform(TInput input)
        {
            return Vector.OneHot(Decide(input), NumberOfOutputs);
        }

        /// <summary>
        ///   Applies the transformation to a set of input vectors,
        ///   producing an associated set of output vectors.
        /// </summary>
        /// 
        /// <param name="input">The input data to which
        ///   the transformation should be applied.</param>
        /// 
        /// <returns>The output generated by applying this
        ///   transformation to the given input.</returns>
        /// 
        public override double[][] Transform(TInput[] input)
        {
            return Jagged.OneHot(Decide(input), NumberOfOutputs);
        }

        /// <summary>
        ///   Applies the transformation to a set of input vectors,
        ///   producing an associated set of output vectors.
        /// </summary>
        /// 
        /// <param name="input">The input data to which
        ///   the transformation should be applied.</param>
        /// <param name="result">The location to where to store the
        ///   result of this transformation.</param>
        /// 
        /// <returns>The output generated by applying this
        ///   transformation to the given input.</returns>
        /// 
        public override double[][] Transform(TInput[] input, double[][] result)
        {
            return Jagged.OneHot(Decide(input), NumberOfOutputs, result);
        }
    }

    /// <summary>
    ///   Base class for multi-class classifiers.
    /// </summary>
    /// 
    [Serializable]
    public abstract class BaseClassifier : BaseClassifier<double[]>,
        IClassifier<int[]>, IClassifier<float[]>
    {
        /// <summary>
        ///   Computes a class-label decision for a given <paramref name="input" />.
        /// </summary>
        /// 
        /// <param name="input">The input vector that should be classified into
        ///   one of the <see cref="ITransform{TInput, TScores}.NumberOfOutputs" /> possible classes.</param>
        ///   
        /// <returns>
        ///   A class-label that best described <paramref name="input" /> according
        ///  to this classifier.
        /// </returns>
        /// 
        public virtual int Decide(int[] input)
        {
            return Decide(input.ToDouble());
        }

        /// <summary>
        ///   Computes a class-label decision for a given <paramref name="input" />.
        /// </summary>
        /// 
        /// <param name="input">The input vector that should be classified into
        ///   one of the <see cref="ITransform{TInput, TScores}.NumberOfOutputs" /> possible classes.</param>
        ///   
        /// <returns>
        ///   A class-label that best described <paramref name="input" /> according
        ///  to this classifier.
        /// </returns>
        /// 

        public virtual int Decide(float[] input)
        {
            return Decide(input.ToDouble());
        }

        /// <summary>
        ///   Computes class-label decisions for each vector in the given <paramref name="input"/>.
        /// </summary>
        /// 
        /// <param name="input">The input vectors that should be classified into
        ///   one of the <see cref="ITransform{TInput, TScores}.NumberOfOutputs"/> possible classes.</param>
        /// 
        /// <returns>A set of class-labels that best describe the <paramref name="input"/> 
        ///   vectors according to this classifier.</returns>
        /// 
        public virtual int[] Decide(int[][] input)
        {
            var result = new int[input.Length];
            for (int i = 0; i < result.Length; i++)
                result[i] = Decide(input[i].ToDouble());
            return result;
        }

        /// <summary>
        ///   Computes class-label decisions for each vector in the given <paramref name="input"/>.
        /// </summary>
        /// 
        /// <param name="input">The input vectors that should be classified into
        ///   one of the <see cref="ITransform{TInput, TScores}.NumberOfOutputs"/> possible classes.</param>
        /// 
        /// <returns>A set of class-labels that best describe the <paramref name="input"/> 
        ///   vectors according to this classifier.</returns>
        /// 
        public virtual int[] Decide(float[][] input)
        {
            var result = new int[input.Length];
            for (int i = 0; i < result.Length; i++)
                result[i] = Decide(input[i].ToDouble());
            return result;
        }

        /// <summary>
        ///   Computes class-label decisions for each vector in the given <paramref name="input"/>.
        /// </summary>
        /// 
        /// <param name="input">The input vectors that should be classified into
        ///   one of the <see cref="ITransform{TInput, TScores}.NumberOfOutputs"/> possible classes.</param>
        /// <param name="result">The location where to store the class-labels.</param>
        /// 
        /// <returns>A set of class-labels that best describe the <paramref name="input"/> 
        ///   vectors according to this classifier.</returns>
        /// 
        public virtual int[] Decide(int[][] input, int[] result)
        {
            for (int i = 0; i < input.Length; i++)
                result[i] = Decide(input[i]);
            return result;
        }

        /// <summary>
        ///   Computes class-label decisions for each vector in the given <paramref name="input"/>.
        /// </summary>
        /// 
        /// <param name="input">The input vectors that should be classified into
        ///   one of the <see cref="ITransform{TInput, TScores}.NumberOfOutputs"/> possible classes.</param>
        /// <param name="result">The location where to store the class-labels.</param>
        /// 
        /// <returns>A set of class-labels that best describe the <paramref name="input"/> 
        ///   vectors according to this classifier.</returns>
        /// 
        public virtual int[] Decide(float[][] input, int[] result)
        {
            for (int i = 0; i < input.Length; i++)
                result[i] = Decide(input[i]);
            return result;
        }



        /// <summary>
        /// Applies the transformation to an input, producing an associated output.
        /// </summary>
        /// <param name="input">The input data to which the transformation should be applied.</param>
        /// <returns>
        /// The output generated by applying this transformation to the given input.
        /// </returns>
        public virtual double[] Transform(int[] input)
        {
            return Vector.OneHot(Decide(input), NumberOfOutputs);
        }

        /// <summary>
        /// Applies the transformation to an input, producing an associated output.
        /// </summary>
        /// <param name="input">The input data to which the transformation should be applied.</param>
        /// <returns>
        /// The output generated by applying this transformation to the given input.
        /// </returns>
        public virtual double[] Transform(float[] input)
        {
            return Vector.OneHot(Decide(input), NumberOfOutputs);
        }




        /// <summary>
        ///   Applies the transformation to a set of input vectors,
        ///   producing an associated set of output vectors.
        /// </summary>
        /// 
        /// <param name="input">The input data to which
        ///   the transformation should be applied.</param>
        /// 
        /// <returns>The output generated by applying this
        ///   transformation to the given input.</returns>
        /// 
        public virtual double[][] Transform(int[][] input)
        {
            return Jagged.OneHot(Decide(input), NumberOfOutputs);
        }

        /// <summary>
        ///   Applies the transformation to a set of input vectors,
        ///   producing an associated set of output vectors.
        /// </summary>
        /// 
        /// <param name="input">The input data to which
        ///   the transformation should be applied.</param>
        /// 
        /// <returns>The output generated by applying this
        ///   transformation to the given input.</returns>
        /// 
        public virtual double[][] Transform(float[][] input)
        {
            return Jagged.OneHot(Decide(input), NumberOfOutputs);
        }

        /// <summary>
        ///   Applies the transformation to a set of input vectors,
        ///   producing an associated set of output vectors.
        /// </summary>
        /// 
        /// <param name="input">The input data to which
        ///   the transformation should be applied.</param>
        /// <param name="result">The location to where to store the
        ///   result of this transformation.</param>
        /// 
        /// <returns>The output generated by applying this
        ///   transformation to the given input.</returns>
        /// 
        public virtual double[] Transform(int[] input, double[] result)
        {
            return Vector.OneHot(Decide(input), NumberOfOutputs, result);
        }

        /// <summary>
        ///   Applies the transformation to a set of input vectors,
        ///   producing an associated set of output vectors.
        /// </summary>
        /// 
        /// <param name="input">The input data to which
        ///   the transformation should be applied.</param>
        /// <param name="result">The location to where to store the
        ///   result of this transformation.</param>
        /// 
        /// <returns>The output generated by applying this
        ///   transformation to the given input.</returns>
        /// 
        public virtual double[][] Transform(int[][] input, double[][] result)
        {
            return Jagged.OneHot(Decide(input), NumberOfOutputs, result);
        }


        /// <summary>
        ///   Applies the transformation to a set of input vectors,
        ///   producing an associated set of output vectors.
        /// </summary>
        /// 
        /// <param name="input">The input data to which
        ///   the transformation should be applied.</param>
        /// <param name="result">The location to where to store the
        ///   result of this transformation.</param>
        /// 
        /// <returns>The output generated by applying this
        ///   transformation to the given input.</returns>
        /// 
        public virtual double[] Transform(float[] input, double[] result)
        {
            return Vector.OneHot(Decide(input), NumberOfOutputs, result);
        }

        /// <summary>
        ///   Applies the transformation to a set of input vectors,
        ///   producing an associated set of output vectors.
        /// </summary>
        /// 
        /// <param name="input">The input data to which
        ///   the transformation should be applied.</param>
        /// <param name="result">The location to where to store the
        ///   result of this transformation.</param>
        /// 
        /// <returns>The output generated by applying this
        ///   transformation to the given input.</returns>
        /// 
        public virtual double[][] Transform(float[][] input, double[][] result)
        {
            return Jagged.OneHot(Decide(input), NumberOfOutputs, result);
        }
    }
}
