// Accord Statistics Library
// The Accord.NET Framework
// http://accord-framework.net
//
// Copyright © César Souza, 2009-2015
// cesarsouza at gmail.com
//
//    This library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    This library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with this library; if not, write to the Free Software
//    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
//

namespace Accord.MachineLearning
{

    /// <summary>
    ///   Common interface for probabilistic-based classifiers.
    /// </summary>
    /// 
    /// <typeparam name="TInput">The data type for the input data. Default is double[].</typeparam>
    /// <typeparam name="TOutput">The data type for the output data generated by the model. Default is double.</typeparam>
    /// 
    public interface IProbabilisticClassifier<TInput, TOutput> : IClassifier<TInput, TOutput>
    {
        /// <summary>
        ///   Computes the individual probabilities for each of the class
        ///   labels for a given <paramref name="input">input vector</paramref>.
        /// </summary>
        /// 
        /// <param name="input">The input vector that should be classified into
        ///   any of the <see cref="ITransform{TInput, TOutput}.NumberOfOutputs"/> possible classes.</param>
        /// 
        /// <returns>The probabilities of each possible class label.</returns>
        /// 
        double[] Probability(TInput input);

        /// <summary>
        ///   Computes the individual probabilities for each of the class
        ///   labels for a given <paramref name="input">input vector</paramref>.
        /// </summary>
        /// 
        /// <param name="input">The input vector that should be classified into
        ///   any of the <see cref="ITransform{TInput, TOutput}.NumberOfOutputs"/> possible classes.</param>
        /// 
        /// <returns>The probabilities of each possible class label.</returns>
        /// 
        double[][] Probability(TInput[] input);

        /// <summary>
        ///   Computes the individual probabilities for each of the class
        ///   labels for a given <paramref name="input">input vector</paramref>.
        /// </summary>
        /// 
        /// <param name="input">The input vector that should be classified into
        ///   any of the <see cref="ITransform{TInput, TOutput}.NumberOfOutputs"/> possible classes.</param>
        /// <param name="result">The location to store the class-specific probabilities.</param>
        /// 
        /// <returns>The probabilities of each possible class label.</returns>
        /// 
        double[][] Probability(TInput[] input, double[][] result);

        /// <summary>
        ///   Computes the probability for one specific the class label
        ///   for a given <paramref name="input">input vector</paramref>.
        /// </summary>
        /// 
        /// <param name="input">The input vector that should be classified into
        ///   any of the <see cref="ITransform{TInput, TOutput}.NumberOfOutputs"/> possible classes.</param>
        /// <param name="classIndex">The index for the class whose probabilities should be computed.</param>
        /// 
        /// <returns>The probabilities for the specified <paramref name="classIndex">class label</paramref>.</returns>
        /// 
        double Probability(TInput input, int classIndex);

        /// <summary>
        ///   Computes the probability for one specific the class label
        ///   for the given <paramref name="input">input vectors</paramref>.
        /// </summary>
        /// 
        /// <param name="input">The input vectors that should be classified into
        ///   any of the <see cref="ITransform{TInput, TOutput}.NumberOfOutputs"/> possible classes.</param>
        /// <param name="classIndex">The index for the class whose probabilities should be computed.</param>
        /// 
        /// <returns>The probabilities for the specified <paramref name="classIndex">class label</paramref>.</returns>
        /// 
        double[] Probability(TInput[] input, int classIndex);


        /// <summary>
        ///   Computes the probability for one specific the class label
        ///   for the given <paramref name="input">input vectors</paramref>.
        /// </summary>
        /// 
        /// <param name="input">The input vectors that should be classified into
        ///   any of the <see cref="ITransform{TInput, TOutput}.NumberOfOutputs"/> possible classes.</param>
        /// <param name="classIndex">The index for the class whose probabilities should be computed.</param>
        /// <param name="result">The location to store the class-specific probabilities.</param>
        /// 
        /// <returns>The probabilities for the specified <paramref name="classIndex">class label</paramref>.</returns>
        /// 
        double[] Probability(TInput[] input, int classIndex, double[] result);


        /// <summary>
        ///   Computes the individual log-likelihood for each of the class
        ///   labels for a given <paramref name="input">input vector</paramref>.
        /// </summary>
        /// 
        /// <param name="input">The input vector that should be classified into
        ///   any of the <see cref="ITransform{TInput, TOutput}.NumberOfOutputs"/> possible classes.</param>
        /// 
        /// <returns>The probabilities of each possible class label.</returns>
        /// 
        double[] LogLikelihood(TInput[] input);

        /// <summary>
        ///   Computes the individual log-likelihood for each of the class
        ///   labels for a given <paramref name="input">input vector</paramref>.
        /// </summary>
        /// 
        /// <param name="input">The input vector that should be classified into
        ///   any of the <see cref="ITransform{TInput, TOutput}.NumberOfOutputs"/> possible classes.</param>
        /// <param name="result">The location to store the class-specific log-likelihood.</param>
        /// 
        /// <returns>The probabilities of each possible class label.</returns>
        /// 

        double[] LogLikelihood(TInput[] input, double[] result);

        /// <summary>
        ///   Computes the log-likelihood for one specific the class label
        ///   for a given <paramref name="input">input vector</paramref>.
        /// </summary>
        /// 
        /// <param name="input">The input vector that should be classified into
        ///   any of the <see cref="ITransform{TInput, TOutput}.NumberOfOutputs"/> possible classes.</param>
        /// <param name="classIndex">The index for the class whose log-likelihood should be computed.</param>
        /// 
        /// <returns>The log-likelihood for the specified <paramref name="classIndex">class label</paramref>.</returns>
        /// 
        double LogLikelihood(TInput input, int classIndex);

        /// <summary>
        ///   Computes the log-likelihood for one specific the class label
        ///   for the given <paramref name="input">input vectors</paramref>.
        /// </summary>
        /// 
        /// <param name="input">The input vectors that should be classified into
        ///   any of the <see cref="ITransform{TInput, TOutput}.NumberOfOutputs"/> possible classes.</param>
        /// <param name="classIndex">The index for the class whose probabilities should be computed.</param>
        /// <param name="result">The location to store the class-specific log-likelihood.</param>
        /// 
        /// <returns>The log-likelihoods for the specified <paramref name="classIndex">class label</paramref>.</returns>
        /// 
        double[] LogLikelihood(TInput[] input, int classIndex, double[] result);
    }

    /// <summary>
    ///   Common interface for probabilistic-based classifiers.
    /// </summary>
    /// 
    /// <typeparam name="TInput">The data type for the input data. Default is double[].</typeparam>
    /// 
    public interface IProbabilisticClassifier<TInput> : IClassifier<TInput>, IProbabilisticClassifier<TInput, double[]>
    {
    }

    /// <summary>
    ///   Common interface for probabilistic-based classifiers.
    /// </summary>
    /// 
    public interface IProbabilisticClassifier : IClassifier, IProbabilisticClassifier<double[]>
    {
    }
}
