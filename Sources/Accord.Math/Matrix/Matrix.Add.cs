// Accord Math Library
// The Accord.NET Framework
// http://accord-framework.net
//
// Copyright © César Souza, 2009-2015
// cesarsouza at gmail.com
//
//    This library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    This library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with this library; if not, write to the Free Software
//    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
//

// ======================================================================
// This code has been generated by a tool; do not edit manually. Instead,
// edit the T4 template Matrix.Elementwise2.tt so this file can be regenerated. 
// ======================================================================

namespace Accord.Math
{
    using System;
    using Accord.Math;

    /// <summary>
    ///   Elementwise matrix and vector operations.
    /// </summary>
    ///
    public static partial class Elementwise
    {
#pragma warning disable 1591
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static int[,] Add(this int[,] a, int b)
        {
            return Add(a, b, new int[a.GetLength(0), a.GetLength(1)]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static int[][] Add(this int[][] a, int b)
        {
            return Add(a, b, Matrix.JaggedAs<int, int>(a));
        }

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
        public static int[] Add(this int[] a, int b)
        {
            return Add(a, b, new int[a.Length]);
        }

/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static int[] Add(this int[] a, int[] b)
        {
            return Add(a, b, new int[a.Length]);
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static int[][] Add(this int[][] a, int[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<int, int>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static int[,] Add(this int[,] a, int[,] b)
        {
            return Add(a, b, Matrix.CreateAs<int, int>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static int[][] Add(this int[][] a, int[,] b)
        {
            return Add(a, b, Matrix.JaggedAs<int, int>(a));
        }      

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static int[,] Add(this int a, int[,] b)
        {
            return Add(a, b, Matrix.CreateAs<int, int>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static int[][] Add(this int a, int[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<int, int>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static int[] Add(this int a, int[] b)
        {
            return Add(a, b, new int[b.Length]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[,] Add(this int[,] a,  int[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.CreateAs<int, int>(a));
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[][] Add(this int[][] a,  int[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.JaggedAs<int, int>(a));
        }

        public static int[,] AddToDiagonal(this int a, int[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static int[][] AddToDiagonal(this int a, int[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static int[,] AddToDiagonal(this int[] a, int[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static int[][] AddToDiagonal(this int[] a, int[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static int[,] AddToDiagonal(this int[,] a, int b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static int[][] AddToDiagonal(this int[][] a, int b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static int[,] AddToDiagonal(this int[,] a, int[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static int[][] AddToDiagonal(this int[][] a, int[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }
 

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static int[,] Add(this int[,] a, short b)
        {
            return Add(a, b, new int[a.GetLength(0), a.GetLength(1)]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static int[][] Add(this int[][] a, short b)
        {
            return Add(a, b, Matrix.JaggedAs<int, int>(a));
        }

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
        public static int[] Add(this int[] a, short b)
        {
            return Add(a, b, new int[a.Length]);
        }

/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static int[] Add(this int[] a, short[] b)
        {
            return Add(a, b, new int[a.Length]);
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static int[][] Add(this int[][] a, short[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<int, int>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static int[,] Add(this int[,] a, short[,] b)
        {
            return Add(a, b, Matrix.CreateAs<int, int>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static int[][] Add(this int[][] a, short[,] b)
        {
            return Add(a, b, Matrix.JaggedAs<int, int>(a));
        }      

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static int[,] Add(this int a, short[,] b)
        {
            return Add(a, b, Matrix.CreateAs<short, int>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static int[][] Add(this int a, short[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<short, int>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static int[] Add(this int a, short[] b)
        {
            return Add(a, b, new int[b.Length]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[,] Add(this int[,] a,  short[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.CreateAs<int, int>(a));
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[][] Add(this int[][] a,  short[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.JaggedAs<int, int>(a));
        }

        public static short[,] AddToDiagonal(this int a, short[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static short[][] AddToDiagonal(this int a, short[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static short[,] AddToDiagonal(this int[] a, short[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static short[][] AddToDiagonal(this int[] a, short[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static int[,] AddToDiagonal(this int[,] a, short b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static int[][] AddToDiagonal(this int[][] a, short b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static int[,] AddToDiagonal(this int[,] a, short[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static int[][] AddToDiagonal(this int[][] a, short[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }
 

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static float[,] Add(this int[,] a, float b)
        {
            return Add(a, b, new float[a.GetLength(0), a.GetLength(1)]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static float[][] Add(this int[][] a, float b)
        {
            return Add(a, b, Matrix.JaggedAs<int, float>(a));
        }

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
        public static float[] Add(this int[] a, float b)
        {
            return Add(a, b, new float[a.Length]);
        }

/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static float[] Add(this int[] a, float[] b)
        {
            return Add(a, b, new float[a.Length]);
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static float[][] Add(this int[][] a, float[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<int, float>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static float[,] Add(this int[,] a, float[,] b)
        {
            return Add(a, b, Matrix.CreateAs<int, float>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static float[][] Add(this int[][] a, float[,] b)
        {
            return Add(a, b, Matrix.JaggedAs<int, float>(a));
        }      

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static float[,] Add(this int a, float[,] b)
        {
            return Add(a, b, Matrix.CreateAs<float, float>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static float[][] Add(this int a, float[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<float, float>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static float[] Add(this int a, float[] b)
        {
            return Add(a, b, new float[b.Length]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[,] Add(this int[,] a,  float[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.CreateAs<int, float>(a));
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[][] Add(this int[][] a,  float[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.JaggedAs<int, float>(a));
        }

        public static float[,] AddToDiagonal(this int a, float[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static float[][] AddToDiagonal(this int a, float[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static float[,] AddToDiagonal(this int[] a, float[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static float[][] AddToDiagonal(this int[] a, float[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static int[,] AddToDiagonal(this int[,] a, float b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static int[][] AddToDiagonal(this int[][] a, float b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static int[,] AddToDiagonal(this int[,] a, float[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static int[][] AddToDiagonal(this int[][] a, float[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }
 

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static double[,] Add(this int[,] a, double b)
        {
            return Add(a, b, new double[a.GetLength(0), a.GetLength(1)]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static double[][] Add(this int[][] a, double b)
        {
            return Add(a, b, Matrix.JaggedAs<int, double>(a));
        }

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
        public static double[] Add(this int[] a, double b)
        {
            return Add(a, b, new double[a.Length]);
        }

/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static double[] Add(this int[] a, double[] b)
        {
            return Add(a, b, new double[a.Length]);
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[][] Add(this int[][] a, double[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<int, double>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[,] Add(this int[,] a, double[,] b)
        {
            return Add(a, b, Matrix.CreateAs<int, double>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[][] Add(this int[][] a, double[,] b)
        {
            return Add(a, b, Matrix.JaggedAs<int, double>(a));
        }      

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[,] Add(this int a, double[,] b)
        {
            return Add(a, b, Matrix.CreateAs<double, double>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[][] Add(this int a, double[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<double, double>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static double[] Add(this int a, double[] b)
        {
            return Add(a, b, new double[b.Length]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[,] Add(this int[,] a,  double[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.CreateAs<int, double>(a));
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[][] Add(this int[][] a,  double[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.JaggedAs<int, double>(a));
        }

        public static double[,] AddToDiagonal(this int a, double[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static double[][] AddToDiagonal(this int a, double[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static double[,] AddToDiagonal(this int[] a, double[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static double[][] AddToDiagonal(this int[] a, double[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static int[,] AddToDiagonal(this int[,] a, double b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static int[][] AddToDiagonal(this int[][] a, double b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static int[,] AddToDiagonal(this int[,] a, double[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static int[][] AddToDiagonal(this int[][] a, double[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }
 

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static int[,] Add(this short[,] a, int b)
        {
            return Add(a, b, new int[a.GetLength(0), a.GetLength(1)]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static int[][] Add(this short[][] a, int b)
        {
            return Add(a, b, Matrix.JaggedAs<short, int>(a));
        }

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
        public static int[] Add(this short[] a, int b)
        {
            return Add(a, b, new int[a.Length]);
        }

/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static int[] Add(this short[] a, int[] b)
        {
            return Add(a, b, new int[a.Length]);
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static int[][] Add(this short[][] a, int[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<short, int>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static int[,] Add(this short[,] a, int[,] b)
        {
            return Add(a, b, Matrix.CreateAs<short, int>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static int[][] Add(this short[][] a, int[,] b)
        {
            return Add(a, b, Matrix.JaggedAs<short, int>(a));
        }      

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static int[,] Add(this short a, int[,] b)
        {
            return Add(a, b, Matrix.CreateAs<int, int>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static int[][] Add(this short a, int[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<int, int>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static int[] Add(this short a, int[] b)
        {
            return Add(a, b, new int[b.Length]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[,] Add(this short[,] a,  int[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.CreateAs<short, int>(a));
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[][] Add(this short[][] a,  int[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.JaggedAs<short, int>(a));
        }

        public static int[,] AddToDiagonal(this short a, int[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static int[][] AddToDiagonal(this short a, int[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static int[,] AddToDiagonal(this short[] a, int[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static int[][] AddToDiagonal(this short[] a, int[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static short[,] AddToDiagonal(this short[,] a, int b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static short[][] AddToDiagonal(this short[][] a, int b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static short[,] AddToDiagonal(this short[,] a, int[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static short[][] AddToDiagonal(this short[][] a, int[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }
 

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static short[,] Add(this short[,] a, short b)
        {
            return Add(a, b, new short[a.GetLength(0), a.GetLength(1)]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static short[][] Add(this short[][] a, short b)
        {
            return Add(a, b, Matrix.JaggedAs<short, short>(a));
        }

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
        public static short[] Add(this short[] a, short b)
        {
            return Add(a, b, new short[a.Length]);
        }

/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static short[] Add(this short[] a, short[] b)
        {
            return Add(a, b, new short[a.Length]);
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static short[][] Add(this short[][] a, short[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<short, short>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static short[,] Add(this short[,] a, short[,] b)
        {
            return Add(a, b, Matrix.CreateAs<short, short>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static short[][] Add(this short[][] a, short[,] b)
        {
            return Add(a, b, Matrix.JaggedAs<short, short>(a));
        }      

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static short[,] Add(this short a, short[,] b)
        {
            return Add(a, b, Matrix.CreateAs<short, short>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static short[][] Add(this short a, short[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<short, short>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static short[] Add(this short a, short[] b)
        {
            return Add(a, b, new short[b.Length]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[,] Add(this short[,] a,  short[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.CreateAs<short, short>(a));
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[][] Add(this short[][] a,  short[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.JaggedAs<short, short>(a));
        }

        public static short[,] AddToDiagonal(this short a, short[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static short[][] AddToDiagonal(this short a, short[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static short[,] AddToDiagonal(this short[] a, short[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static short[][] AddToDiagonal(this short[] a, short[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static short[,] AddToDiagonal(this short[,] a, short b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static short[][] AddToDiagonal(this short[][] a, short b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static short[,] AddToDiagonal(this short[,] a, short[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static short[][] AddToDiagonal(this short[][] a, short[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }
 

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static float[,] Add(this short[,] a, float b)
        {
            return Add(a, b, new float[a.GetLength(0), a.GetLength(1)]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static float[][] Add(this short[][] a, float b)
        {
            return Add(a, b, Matrix.JaggedAs<short, float>(a));
        }

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
        public static float[] Add(this short[] a, float b)
        {
            return Add(a, b, new float[a.Length]);
        }

/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static float[] Add(this short[] a, float[] b)
        {
            return Add(a, b, new float[a.Length]);
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static float[][] Add(this short[][] a, float[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<short, float>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static float[,] Add(this short[,] a, float[,] b)
        {
            return Add(a, b, Matrix.CreateAs<short, float>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static float[][] Add(this short[][] a, float[,] b)
        {
            return Add(a, b, Matrix.JaggedAs<short, float>(a));
        }      

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static float[,] Add(this short a, float[,] b)
        {
            return Add(a, b, Matrix.CreateAs<float, float>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static float[][] Add(this short a, float[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<float, float>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static float[] Add(this short a, float[] b)
        {
            return Add(a, b, new float[b.Length]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[,] Add(this short[,] a,  float[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.CreateAs<short, float>(a));
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[][] Add(this short[][] a,  float[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.JaggedAs<short, float>(a));
        }

        public static float[,] AddToDiagonal(this short a, float[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static float[][] AddToDiagonal(this short a, float[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static float[,] AddToDiagonal(this short[] a, float[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static float[][] AddToDiagonal(this short[] a, float[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static short[,] AddToDiagonal(this short[,] a, float b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static short[][] AddToDiagonal(this short[][] a, float b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static short[,] AddToDiagonal(this short[,] a, float[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static short[][] AddToDiagonal(this short[][] a, float[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }
 

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static double[,] Add(this short[,] a, double b)
        {
            return Add(a, b, new double[a.GetLength(0), a.GetLength(1)]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static double[][] Add(this short[][] a, double b)
        {
            return Add(a, b, Matrix.JaggedAs<short, double>(a));
        }

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
        public static double[] Add(this short[] a, double b)
        {
            return Add(a, b, new double[a.Length]);
        }

/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static double[] Add(this short[] a, double[] b)
        {
            return Add(a, b, new double[a.Length]);
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[][] Add(this short[][] a, double[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<short, double>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[,] Add(this short[,] a, double[,] b)
        {
            return Add(a, b, Matrix.CreateAs<short, double>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[][] Add(this short[][] a, double[,] b)
        {
            return Add(a, b, Matrix.JaggedAs<short, double>(a));
        }      

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[,] Add(this short a, double[,] b)
        {
            return Add(a, b, Matrix.CreateAs<double, double>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[][] Add(this short a, double[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<double, double>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static double[] Add(this short a, double[] b)
        {
            return Add(a, b, new double[b.Length]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[,] Add(this short[,] a,  double[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.CreateAs<short, double>(a));
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[][] Add(this short[][] a,  double[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.JaggedAs<short, double>(a));
        }

        public static double[,] AddToDiagonal(this short a, double[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static double[][] AddToDiagonal(this short a, double[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static double[,] AddToDiagonal(this short[] a, double[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static double[][] AddToDiagonal(this short[] a, double[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static short[,] AddToDiagonal(this short[,] a, double b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static short[][] AddToDiagonal(this short[][] a, double b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static short[,] AddToDiagonal(this short[,] a, double[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static short[][] AddToDiagonal(this short[][] a, double[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }
 

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static float[,] Add(this float[,] a, int b)
        {
            return Add(a, b, new float[a.GetLength(0), a.GetLength(1)]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static float[][] Add(this float[][] a, int b)
        {
            return Add(a, b, Matrix.JaggedAs<float, float>(a));
        }

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
        public static float[] Add(this float[] a, int b)
        {
            return Add(a, b, new float[a.Length]);
        }

/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static float[] Add(this float[] a, int[] b)
        {
            return Add(a, b, new float[a.Length]);
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static float[][] Add(this float[][] a, int[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<float, float>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static float[,] Add(this float[,] a, int[,] b)
        {
            return Add(a, b, Matrix.CreateAs<float, float>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static float[][] Add(this float[][] a, int[,] b)
        {
            return Add(a, b, Matrix.JaggedAs<float, float>(a));
        }      

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static float[,] Add(this float a, int[,] b)
        {
            return Add(a, b, Matrix.CreateAs<int, float>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static float[][] Add(this float a, int[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<int, float>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static float[] Add(this float a, int[] b)
        {
            return Add(a, b, new float[b.Length]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[,] Add(this float[,] a,  int[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.CreateAs<float, float>(a));
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[][] Add(this float[][] a,  int[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.JaggedAs<float, float>(a));
        }

        public static int[,] AddToDiagonal(this float a, int[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static int[][] AddToDiagonal(this float a, int[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static int[,] AddToDiagonal(this float[] a, int[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static int[][] AddToDiagonal(this float[] a, int[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static float[,] AddToDiagonal(this float[,] a, int b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static float[][] AddToDiagonal(this float[][] a, int b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static float[,] AddToDiagonal(this float[,] a, int[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static float[][] AddToDiagonal(this float[][] a, int[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }
 

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static float[,] Add(this float[,] a, short b)
        {
            return Add(a, b, new float[a.GetLength(0), a.GetLength(1)]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static float[][] Add(this float[][] a, short b)
        {
            return Add(a, b, Matrix.JaggedAs<float, float>(a));
        }

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
        public static float[] Add(this float[] a, short b)
        {
            return Add(a, b, new float[a.Length]);
        }

/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static float[] Add(this float[] a, short[] b)
        {
            return Add(a, b, new float[a.Length]);
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static float[][] Add(this float[][] a, short[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<float, float>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static float[,] Add(this float[,] a, short[,] b)
        {
            return Add(a, b, Matrix.CreateAs<float, float>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static float[][] Add(this float[][] a, short[,] b)
        {
            return Add(a, b, Matrix.JaggedAs<float, float>(a));
        }      

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static float[,] Add(this float a, short[,] b)
        {
            return Add(a, b, Matrix.CreateAs<short, float>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static float[][] Add(this float a, short[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<short, float>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static float[] Add(this float a, short[] b)
        {
            return Add(a, b, new float[b.Length]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[,] Add(this float[,] a,  short[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.CreateAs<float, float>(a));
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[][] Add(this float[][] a,  short[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.JaggedAs<float, float>(a));
        }

        public static short[,] AddToDiagonal(this float a, short[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static short[][] AddToDiagonal(this float a, short[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static short[,] AddToDiagonal(this float[] a, short[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static short[][] AddToDiagonal(this float[] a, short[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static float[,] AddToDiagonal(this float[,] a, short b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static float[][] AddToDiagonal(this float[][] a, short b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static float[,] AddToDiagonal(this float[,] a, short[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static float[][] AddToDiagonal(this float[][] a, short[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }
 

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static float[,] Add(this float[,] a, float b)
        {
            return Add(a, b, new float[a.GetLength(0), a.GetLength(1)]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static float[][] Add(this float[][] a, float b)
        {
            return Add(a, b, Matrix.JaggedAs<float, float>(a));
        }

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
        public static float[] Add(this float[] a, float b)
        {
            return Add(a, b, new float[a.Length]);
        }

/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static float[] Add(this float[] a, float[] b)
        {
            return Add(a, b, new float[a.Length]);
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static float[][] Add(this float[][] a, float[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<float, float>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static float[,] Add(this float[,] a, float[,] b)
        {
            return Add(a, b, Matrix.CreateAs<float, float>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static float[][] Add(this float[][] a, float[,] b)
        {
            return Add(a, b, Matrix.JaggedAs<float, float>(a));
        }      

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static float[,] Add(this float a, float[,] b)
        {
            return Add(a, b, Matrix.CreateAs<float, float>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static float[][] Add(this float a, float[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<float, float>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static float[] Add(this float a, float[] b)
        {
            return Add(a, b, new float[b.Length]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[,] Add(this float[,] a,  float[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.CreateAs<float, float>(a));
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[][] Add(this float[][] a,  float[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.JaggedAs<float, float>(a));
        }

        public static float[,] AddToDiagonal(this float a, float[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static float[][] AddToDiagonal(this float a, float[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static float[,] AddToDiagonal(this float[] a, float[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static float[][] AddToDiagonal(this float[] a, float[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static float[,] AddToDiagonal(this float[,] a, float b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static float[][] AddToDiagonal(this float[][] a, float b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static float[,] AddToDiagonal(this float[,] a, float[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static float[][] AddToDiagonal(this float[][] a, float[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }
 

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static double[,] Add(this float[,] a, double b)
        {
            return Add(a, b, new double[a.GetLength(0), a.GetLength(1)]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static double[][] Add(this float[][] a, double b)
        {
            return Add(a, b, Matrix.JaggedAs<float, double>(a));
        }

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
        public static double[] Add(this float[] a, double b)
        {
            return Add(a, b, new double[a.Length]);
        }

/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static double[] Add(this float[] a, double[] b)
        {
            return Add(a, b, new double[a.Length]);
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[][] Add(this float[][] a, double[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<float, double>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[,] Add(this float[,] a, double[,] b)
        {
            return Add(a, b, Matrix.CreateAs<float, double>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[][] Add(this float[][] a, double[,] b)
        {
            return Add(a, b, Matrix.JaggedAs<float, double>(a));
        }      

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[,] Add(this float a, double[,] b)
        {
            return Add(a, b, Matrix.CreateAs<double, double>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[][] Add(this float a, double[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<double, double>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static double[] Add(this float a, double[] b)
        {
            return Add(a, b, new double[b.Length]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[,] Add(this float[,] a,  double[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.CreateAs<float, double>(a));
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[][] Add(this float[][] a,  double[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.JaggedAs<float, double>(a));
        }

        public static double[,] AddToDiagonal(this float a, double[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static double[][] AddToDiagonal(this float a, double[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static double[,] AddToDiagonal(this float[] a, double[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static double[][] AddToDiagonal(this float[] a, double[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static float[,] AddToDiagonal(this float[,] a, double b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static float[][] AddToDiagonal(this float[][] a, double b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static float[,] AddToDiagonal(this float[,] a, double[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static float[][] AddToDiagonal(this float[][] a, double[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }
 

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static double[,] Add(this double[,] a, int b)
        {
            return Add(a, b, new double[a.GetLength(0), a.GetLength(1)]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static double[][] Add(this double[][] a, int b)
        {
            return Add(a, b, Matrix.JaggedAs<double, double>(a));
        }

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
        public static double[] Add(this double[] a, int b)
        {
            return Add(a, b, new double[a.Length]);
        }

/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static double[] Add(this double[] a, int[] b)
        {
            return Add(a, b, new double[a.Length]);
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[][] Add(this double[][] a, int[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<double, double>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[,] Add(this double[,] a, int[,] b)
        {
            return Add(a, b, Matrix.CreateAs<double, double>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[][] Add(this double[][] a, int[,] b)
        {
            return Add(a, b, Matrix.JaggedAs<double, double>(a));
        }      

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[,] Add(this double a, int[,] b)
        {
            return Add(a, b, Matrix.CreateAs<int, double>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[][] Add(this double a, int[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<int, double>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static double[] Add(this double a, int[] b)
        {
            return Add(a, b, new double[b.Length]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[,] Add(this double[,] a,  int[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.CreateAs<double, double>(a));
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[][] Add(this double[][] a,  int[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.JaggedAs<double, double>(a));
        }

        public static int[,] AddToDiagonal(this double a, int[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static int[][] AddToDiagonal(this double a, int[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static int[,] AddToDiagonal(this double[] a, int[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static int[][] AddToDiagonal(this double[] a, int[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static double[,] AddToDiagonal(this double[,] a, int b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static double[][] AddToDiagonal(this double[][] a, int b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static double[,] AddToDiagonal(this double[,] a, int[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static double[][] AddToDiagonal(this double[][] a, int[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }
 

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static double[,] Add(this double[,] a, short b)
        {
            return Add(a, b, new double[a.GetLength(0), a.GetLength(1)]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static double[][] Add(this double[][] a, short b)
        {
            return Add(a, b, Matrix.JaggedAs<double, double>(a));
        }

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
        public static double[] Add(this double[] a, short b)
        {
            return Add(a, b, new double[a.Length]);
        }

/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static double[] Add(this double[] a, short[] b)
        {
            return Add(a, b, new double[a.Length]);
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[][] Add(this double[][] a, short[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<double, double>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[,] Add(this double[,] a, short[,] b)
        {
            return Add(a, b, Matrix.CreateAs<double, double>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[][] Add(this double[][] a, short[,] b)
        {
            return Add(a, b, Matrix.JaggedAs<double, double>(a));
        }      

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[,] Add(this double a, short[,] b)
        {
            return Add(a, b, Matrix.CreateAs<short, double>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[][] Add(this double a, short[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<short, double>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static double[] Add(this double a, short[] b)
        {
            return Add(a, b, new double[b.Length]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[,] Add(this double[,] a,  short[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.CreateAs<double, double>(a));
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[][] Add(this double[][] a,  short[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.JaggedAs<double, double>(a));
        }

        public static short[,] AddToDiagonal(this double a, short[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static short[][] AddToDiagonal(this double a, short[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static short[,] AddToDiagonal(this double[] a, short[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static short[][] AddToDiagonal(this double[] a, short[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static double[,] AddToDiagonal(this double[,] a, short b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static double[][] AddToDiagonal(this double[][] a, short b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static double[,] AddToDiagonal(this double[,] a, short[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static double[][] AddToDiagonal(this double[][] a, short[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }
 

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static double[,] Add(this double[,] a, float b)
        {
            return Add(a, b, new double[a.GetLength(0), a.GetLength(1)]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static double[][] Add(this double[][] a, float b)
        {
            return Add(a, b, Matrix.JaggedAs<double, double>(a));
        }

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
        public static double[] Add(this double[] a, float b)
        {
            return Add(a, b, new double[a.Length]);
        }

/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static double[] Add(this double[] a, float[] b)
        {
            return Add(a, b, new double[a.Length]);
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[][] Add(this double[][] a, float[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<double, double>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[,] Add(this double[,] a, float[,] b)
        {
            return Add(a, b, Matrix.CreateAs<double, double>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[][] Add(this double[][] a, float[,] b)
        {
            return Add(a, b, Matrix.JaggedAs<double, double>(a));
        }      

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[,] Add(this double a, float[,] b)
        {
            return Add(a, b, Matrix.CreateAs<float, double>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[][] Add(this double a, float[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<float, double>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static double[] Add(this double a, float[] b)
        {
            return Add(a, b, new double[b.Length]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[,] Add(this double[,] a,  float[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.CreateAs<double, double>(a));
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[][] Add(this double[][] a,  float[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.JaggedAs<double, double>(a));
        }

        public static float[,] AddToDiagonal(this double a, float[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static float[][] AddToDiagonal(this double a, float[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static float[,] AddToDiagonal(this double[] a, float[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static float[][] AddToDiagonal(this double[] a, float[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static double[,] AddToDiagonal(this double[,] a, float b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static double[][] AddToDiagonal(this double[][] a, float b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static double[,] AddToDiagonal(this double[,] a, float[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static double[][] AddToDiagonal(this double[][] a, float[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }
 

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static double[,] Add(this double[,] a, double b)
        {
            return Add(a, b, new double[a.GetLength(0), a.GetLength(1)]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
*/
        public static double[][] Add(this double[][] a, double b)
        {
            return Add(a, b, Matrix.JaggedAs<double, double>(a));
        }

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// 
        public static double[] Add(this double[] a, double b)
        {
            return Add(a, b, new double[a.Length]);
        }

/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static double[] Add(this double[] a, double[] b)
        {
            return Add(a, b, new double[a.Length]);
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[][] Add(this double[][] a, double[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<double, double>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[,] Add(this double[,] a, double[,] b)
        {
            return Add(a, b, Matrix.CreateAs<double, double>(a));
        }     

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[][] Add(this double[][] a, double[,] b)
        {
            return Add(a, b, Matrix.JaggedAs<double, double>(a));
        }      

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[,] Add(this double a, double[,] b)
        {
            return Add(a, b, Matrix.CreateAs<double, double>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// 
*/
        public static double[][] Add(this double a, double[][] b)
        {
            return Add(a, b, Matrix.JaggedAs<double, double>(b));
        }     
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// 
*/
        public static double[] Add(this double a, double[] b)
        {
            return Add(a, b, new double[b.Length]);
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[,] Add(this double[,] a,  double[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.CreateAs<double, double>(a));
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[][] Add(this double[][] a,  double[] b, int dimension)
        {
            return Add(a, b, dimension, Matrix.JaggedAs<double, double>(a));
        }

        public static double[,] AddToDiagonal(this double a, double[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static double[][] AddToDiagonal(this double a, double[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static double[,] AddToDiagonal(this double[] a, double[,] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static double[][] AddToDiagonal(this double[] a, double[][] b)
        {
            return AddToDiagonal(a, b, b.MemberwiseClone());
        }

        public static double[,] AddToDiagonal(this double[,] a, double b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static double[][] AddToDiagonal(this double[][] a, double b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static double[,] AddToDiagonal(this double[,] a, double[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }

        public static double[][] AddToDiagonal(this double[][] a, double[] b)
        {
            return AddToDiagonal(a, b, a.MemberwiseClone());
        }
 


#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this int[][] a, int[,] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (int)((int)a[i][j] + (int)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this int[,] a, int[][] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this int[,] a, int[,] b, int[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (int* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this int[][] a, int[,] b, int[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)(a[i][j]) + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this int[,] a, int[][] b, int[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this int[][] a, int[][] b, int[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (int)((int)(a[i][j]) + (int)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this int[,] a, int[,] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (int* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this int[,] a, int b, int[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this int[][] a, int b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this int[][] a, int b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this int a, int[,] b, int[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)a +  (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this int a, int[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (int)((int)a + (int)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this int a, int[][] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (int)((int)a + (int)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this int a, int[,] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this int[,] a, int b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this int[,] a, int b, int[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this int[][] a, int b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this int[] a, int[] b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[] Add(this int[] a, int b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this int a, int[] b, int[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (int)((int)a + (int)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[,] Add(this int[,] a,  int[] b, int dimension, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[][] Add(this int[][] a,  int[] b, int dimension, int[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static int[,] AddToDiagonal(this int a, int[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this int a, int[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this int[] a, int[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a[j] + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this int[] a, int[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i] + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this int[,] a, int b, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this int[][] a, int b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b);
            return result;
        }

        public static int[,] AddToDiagonal(this int[,] a, int[] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b[j]);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this int[][] a, int[] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this int[][] a, int[,] b, short[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (short)((short)a[i][j] + (short)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this int[,] a, int[][] b, short[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this int[,] a, int[,] b, short[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (int* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this int[][] a, int[,] b, short[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)(a[i][j]) + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this int[,] a, int[][] b, short[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this int[][] a, int[][] b, short[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (short)((short)(a[i][j]) + (short)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this int[,] a, int[,] b, short[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (int* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this int[,] a, int b, short[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this int[][] a, int b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this int[][] a, int b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this int a, int[,] b, short[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)a +  (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this int a, int[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (short)((short)a + (short)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this int a, int[][] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (short)((short)a + (short)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this int a, int[,] b, short[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this int[,] a, int b, short[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this int[,] a, int b, short[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this int[][] a, int b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this int[] a, int[] b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[] Add(this int[] a, int b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this int a, int[] b, short[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (short)((short)a + (short)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[,] Add(this int[,] a,  int[] b, int dimension, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[][] Add(this int[][] a,  int[] b, int dimension, short[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static short[,] AddToDiagonal(this int a, int[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this int a, int[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this int[] a, int[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a[j] + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this int[] a, int[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i] + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this int[,] a, int b, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this int[][] a, int b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b);
            return result;
        }

        public static short[,] AddToDiagonal(this int[,] a, int[] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b[j]);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this int[][] a, int[] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this int[][] a, int[,] b, float[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (float)((float)a[i][j] + (float)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this int[,] a, int[][] b, float[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this int[,] a, int[,] b, float[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (int* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this int[][] a, int[,] b, float[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)(a[i][j]) + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this int[,] a, int[][] b, float[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this int[][] a, int[][] b, float[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (float)((float)(a[i][j]) + (float)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this int[,] a, int[,] b, float[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (int* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this int[,] a, int b, float[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this int[][] a, int b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this int[][] a, int b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this int a, int[,] b, float[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)a +  (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this int a, int[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (float)((float)a + (float)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this int a, int[][] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (float)((float)a + (float)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this int a, int[,] b, float[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this int[,] a, int b, float[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this int[,] a, int b, float[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this int[][] a, int b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this int[] a, int[] b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[] Add(this int[] a, int b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this int a, int[] b, float[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (float)((float)a + (float)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[,] Add(this int[,] a,  int[] b, int dimension, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[][] Add(this int[][] a,  int[] b, int dimension, float[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static float[,] AddToDiagonal(this int a, int[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this int a, int[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this int[] a, int[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a[j] + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this int[] a, int[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i] + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this int[,] a, int b, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this int[][] a, int b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b);
            return result;
        }

        public static float[,] AddToDiagonal(this int[,] a, int[] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b[j]);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this int[][] a, int[] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this int[][] a, int[,] b, double[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (double)((double)a[i][j] + (double)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this int[,] a, int[][] b, double[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this int[,] a, int[,] b, double[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (int* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this int[][] a, int[,] b, double[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)(a[i][j]) + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this int[,] a, int[][] b, double[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this int[][] a, int[][] b, double[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (double)((double)(a[i][j]) + (double)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this int[,] a, int[,] b, double[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (int* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this int[,] a, int b, double[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this int[][] a, int b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this int[][] a, int b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this int a, int[,] b, double[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)a +  (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this int a, int[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (double)((double)a + (double)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this int a, int[][] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (double)((double)a + (double)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this int a, int[,] b, double[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this int[,] a, int b, double[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this int[,] a, int b, double[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this int[][] a, int b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this int[] a, int[] b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[] Add(this int[] a, int b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this int a, int[] b, double[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (double)((double)a + (double)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[,] Add(this int[,] a,  int[] b, int dimension, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[][] Add(this int[][] a,  int[] b, int dimension, double[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static double[,] AddToDiagonal(this int a, int[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this int a, int[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this int[] a, int[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a[j] + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this int[] a, int[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i] + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this int[,] a, int b, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this int[][] a, int b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b);
            return result;
        }

        public static double[,] AddToDiagonal(this int[,] a, int[] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b[j]);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this int[][] a, int[] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this int[][] a, short[,] b, int[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (int)((int)a[i][j] + (int)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this int[,] a, short[][] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this int[,] a, short[,] b, int[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (short* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this int[][] a, short[,] b, int[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)(a[i][j]) + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this int[,] a, short[][] b, int[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this int[][] a, short[][] b, int[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (int)((int)(a[i][j]) + (int)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this int[,] a, short[,] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (short* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this int[,] a, short b, int[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this int[][] a, short b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this int[][] a, short b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this int a, short[,] b, int[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)a +  (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this int a, short[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (int)((int)a + (int)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this int a, short[][] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (int)((int)a + (int)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this int a, short[,] b, int[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this int[,] a, short b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this int[,] a, short b, int[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this int[][] a, short b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this int[] a, short[] b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[] Add(this int[] a, short b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this int a, short[] b, int[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (int)((int)a + (int)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[,] Add(this int[,] a,  short[] b, int dimension, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[][] Add(this int[][] a,  short[] b, int dimension, int[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static int[,] AddToDiagonal(this int a, short[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this int a, short[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this int[] a, short[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a[j] + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this int[] a, short[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i] + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this int[,] a, short b, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this int[][] a, short b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b);
            return result;
        }

        public static int[,] AddToDiagonal(this int[,] a, short[] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b[j]);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this int[][] a, short[] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this int[][] a, short[,] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (short)((short)a[i][j] + (short)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this int[,] a, short[][] b, short[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this int[,] a, short[,] b, short[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (short* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this int[][] a, short[,] b, short[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)(a[i][j]) + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this int[,] a, short[][] b, short[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this int[][] a, short[][] b, short[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (short)((short)(a[i][j]) + (short)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this int[,] a, short[,] b, short[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (short* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this int[,] a, short b, short[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this int[][] a, short b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this int[][] a, short b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this int a, short[,] b, short[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)a +  (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this int a, short[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (short)((short)a + (short)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this int a, short[][] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (short)((short)a + (short)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this int a, short[,] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this int[,] a, short b, short[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this int[,] a, short b, short[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this int[][] a, short b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this int[] a, short[] b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[] Add(this int[] a, short b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this int a, short[] b, short[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (short)((short)a + (short)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[,] Add(this int[,] a,  short[] b, int dimension, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[][] Add(this int[][] a,  short[] b, int dimension, short[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static short[,] AddToDiagonal(this int a, short[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this int a, short[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this int[] a, short[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a[j] + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this int[] a, short[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i] + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this int[,] a, short b, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this int[][] a, short b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b);
            return result;
        }

        public static short[,] AddToDiagonal(this int[,] a, short[] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b[j]);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this int[][] a, short[] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this int[][] a, short[,] b, float[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (float)((float)a[i][j] + (float)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this int[,] a, short[][] b, float[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this int[,] a, short[,] b, float[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (short* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this int[][] a, short[,] b, float[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)(a[i][j]) + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this int[,] a, short[][] b, float[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this int[][] a, short[][] b, float[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (float)((float)(a[i][j]) + (float)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this int[,] a, short[,] b, float[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (short* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this int[,] a, short b, float[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this int[][] a, short b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this int[][] a, short b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this int a, short[,] b, float[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)a +  (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this int a, short[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (float)((float)a + (float)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this int a, short[][] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (float)((float)a + (float)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this int a, short[,] b, float[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this int[,] a, short b, float[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this int[,] a, short b, float[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this int[][] a, short b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this int[] a, short[] b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[] Add(this int[] a, short b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this int a, short[] b, float[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (float)((float)a + (float)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[,] Add(this int[,] a,  short[] b, int dimension, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[][] Add(this int[][] a,  short[] b, int dimension, float[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static float[,] AddToDiagonal(this int a, short[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this int a, short[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this int[] a, short[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a[j] + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this int[] a, short[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i] + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this int[,] a, short b, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this int[][] a, short b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b);
            return result;
        }

        public static float[,] AddToDiagonal(this int[,] a, short[] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b[j]);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this int[][] a, short[] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this int[][] a, short[,] b, double[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (double)((double)a[i][j] + (double)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this int[,] a, short[][] b, double[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this int[,] a, short[,] b, double[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (short* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this int[][] a, short[,] b, double[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)(a[i][j]) + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this int[,] a, short[][] b, double[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this int[][] a, short[][] b, double[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (double)((double)(a[i][j]) + (double)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this int[,] a, short[,] b, double[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (short* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this int[,] a, short b, double[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this int[][] a, short b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this int[][] a, short b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this int a, short[,] b, double[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)a +  (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this int a, short[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (double)((double)a + (double)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this int a, short[][] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (double)((double)a + (double)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this int a, short[,] b, double[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this int[,] a, short b, double[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this int[,] a, short b, double[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this int[][] a, short b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this int[] a, short[] b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[] Add(this int[] a, short b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this int a, short[] b, double[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (double)((double)a + (double)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[,] Add(this int[,] a,  short[] b, int dimension, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[][] Add(this int[][] a,  short[] b, int dimension, double[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static double[,] AddToDiagonal(this int a, short[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this int a, short[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this int[] a, short[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a[j] + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this int[] a, short[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i] + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this int[,] a, short b, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this int[][] a, short b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b);
            return result;
        }

        public static double[,] AddToDiagonal(this int[,] a, short[] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b[j]);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this int[][] a, short[] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this int[][] a, float[,] b, int[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (int)((int)a[i][j] + (int)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this int[,] a, float[][] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this int[,] a, float[,] b, int[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (float* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this int[][] a, float[,] b, int[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)(a[i][j]) + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this int[,] a, float[][] b, int[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this int[][] a, float[][] b, int[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (int)((int)(a[i][j]) + (int)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this int[,] a, float[,] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (float* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this int[,] a, float b, int[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this int[][] a, float b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this int[][] a, float b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this int a, float[,] b, int[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)a +  (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this int a, float[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (int)((int)a + (int)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this int a, float[][] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (int)((int)a + (int)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this int a, float[,] b, int[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this int[,] a, float b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this int[,] a, float b, int[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this int[][] a, float b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this int[] a, float[] b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[] Add(this int[] a, float b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this int a, float[] b, int[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (int)((int)a + (int)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[,] Add(this int[,] a,  float[] b, int dimension, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[][] Add(this int[][] a,  float[] b, int dimension, int[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static int[,] AddToDiagonal(this int a, float[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this int a, float[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this int[] a, float[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a[j] + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this int[] a, float[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i] + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this int[,] a, float b, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this int[][] a, float b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b);
            return result;
        }

        public static int[,] AddToDiagonal(this int[,] a, float[] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b[j]);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this int[][] a, float[] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this int[][] a, float[,] b, short[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (short)((short)a[i][j] + (short)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this int[,] a, float[][] b, short[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this int[,] a, float[,] b, short[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (float* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this int[][] a, float[,] b, short[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)(a[i][j]) + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this int[,] a, float[][] b, short[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this int[][] a, float[][] b, short[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (short)((short)(a[i][j]) + (short)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this int[,] a, float[,] b, short[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (float* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this int[,] a, float b, short[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this int[][] a, float b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this int[][] a, float b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this int a, float[,] b, short[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)a +  (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this int a, float[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (short)((short)a + (short)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this int a, float[][] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (short)((short)a + (short)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this int a, float[,] b, short[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this int[,] a, float b, short[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this int[,] a, float b, short[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this int[][] a, float b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this int[] a, float[] b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[] Add(this int[] a, float b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this int a, float[] b, short[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (short)((short)a + (short)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[,] Add(this int[,] a,  float[] b, int dimension, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[][] Add(this int[][] a,  float[] b, int dimension, short[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static short[,] AddToDiagonal(this int a, float[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this int a, float[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this int[] a, float[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a[j] + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this int[] a, float[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i] + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this int[,] a, float b, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this int[][] a, float b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b);
            return result;
        }

        public static short[,] AddToDiagonal(this int[,] a, float[] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b[j]);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this int[][] a, float[] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this int[][] a, float[,] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (float)((float)a[i][j] + (float)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this int[,] a, float[][] b, float[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this int[,] a, float[,] b, float[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (float* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this int[][] a, float[,] b, float[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)(a[i][j]) + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this int[,] a, float[][] b, float[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this int[][] a, float[][] b, float[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (float)((float)(a[i][j]) + (float)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this int[,] a, float[,] b, float[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (float* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this int[,] a, float b, float[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this int[][] a, float b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this int[][] a, float b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this int a, float[,] b, float[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)a +  (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this int a, float[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (float)((float)a + (float)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this int a, float[][] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (float)((float)a + (float)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this int a, float[,] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this int[,] a, float b, float[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this int[,] a, float b, float[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this int[][] a, float b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this int[] a, float[] b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[] Add(this int[] a, float b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this int a, float[] b, float[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (float)((float)a + (float)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[,] Add(this int[,] a,  float[] b, int dimension, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[][] Add(this int[][] a,  float[] b, int dimension, float[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static float[,] AddToDiagonal(this int a, float[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this int a, float[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this int[] a, float[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a[j] + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this int[] a, float[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i] + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this int[,] a, float b, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this int[][] a, float b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b);
            return result;
        }

        public static float[,] AddToDiagonal(this int[,] a, float[] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b[j]);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this int[][] a, float[] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this int[][] a, float[,] b, double[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (double)((double)a[i][j] + (double)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this int[,] a, float[][] b, double[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this int[,] a, float[,] b, double[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (float* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this int[][] a, float[,] b, double[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)(a[i][j]) + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this int[,] a, float[][] b, double[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this int[][] a, float[][] b, double[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (double)((double)(a[i][j]) + (double)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this int[,] a, float[,] b, double[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (float* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this int[,] a, float b, double[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this int[][] a, float b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this int[][] a, float b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this int a, float[,] b, double[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)a +  (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this int a, float[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (double)((double)a + (double)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this int a, float[][] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (double)((double)a + (double)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this int a, float[,] b, double[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this int[,] a, float b, double[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this int[,] a, float b, double[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this int[][] a, float b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this int[] a, float[] b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[] Add(this int[] a, float b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this int a, float[] b, double[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (double)((double)a + (double)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[,] Add(this int[,] a,  float[] b, int dimension, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[][] Add(this int[][] a,  float[] b, int dimension, double[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static double[,] AddToDiagonal(this int a, float[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this int a, float[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this int[] a, float[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a[j] + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this int[] a, float[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i] + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this int[,] a, float b, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this int[][] a, float b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b);
            return result;
        }

        public static double[,] AddToDiagonal(this int[,] a, float[] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b[j]);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this int[][] a, float[] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this int[][] a, double[,] b, int[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (int)((int)a[i][j] + (int)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this int[,] a, double[][] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this int[,] a, double[,] b, int[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (double* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this int[][] a, double[,] b, int[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)(a[i][j]) + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this int[,] a, double[][] b, int[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this int[][] a, double[][] b, int[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (int)((int)(a[i][j]) + (int)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this int[,] a, double[,] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (double* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this int[,] a, double b, int[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this int[][] a, double b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this int[][] a, double b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this int a, double[,] b, int[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)a +  (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this int a, double[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (int)((int)a + (int)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this int a, double[][] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (int)((int)a + (int)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this int a, double[,] b, int[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this int[,] a, double b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this int[,] a, double b, int[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this int[][] a, double b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this int[] a, double[] b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[] Add(this int[] a, double b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this int a, double[] b, int[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (int)((int)a + (int)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[,] Add(this int[,] a,  double[] b, int dimension, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[][] Add(this int[][] a,  double[] b, int dimension, int[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static int[,] AddToDiagonal(this int a, double[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this int a, double[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this int[] a, double[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a[j] + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this int[] a, double[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i] + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this int[,] a, double b, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this int[][] a, double b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b);
            return result;
        }

        public static int[,] AddToDiagonal(this int[,] a, double[] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b[j]);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this int[][] a, double[] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this int[][] a, double[,] b, short[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (short)((short)a[i][j] + (short)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this int[,] a, double[][] b, short[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this int[,] a, double[,] b, short[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (double* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this int[][] a, double[,] b, short[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)(a[i][j]) + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this int[,] a, double[][] b, short[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this int[][] a, double[][] b, short[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (short)((short)(a[i][j]) + (short)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this int[,] a, double[,] b, short[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (double* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this int[,] a, double b, short[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this int[][] a, double b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this int[][] a, double b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this int a, double[,] b, short[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)a +  (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this int a, double[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (short)((short)a + (short)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this int a, double[][] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (short)((short)a + (short)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this int a, double[,] b, short[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this int[,] a, double b, short[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this int[,] a, double b, short[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this int[][] a, double b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this int[] a, double[] b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[] Add(this int[] a, double b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this int a, double[] b, short[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (short)((short)a + (short)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[,] Add(this int[,] a,  double[] b, int dimension, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[][] Add(this int[][] a,  double[] b, int dimension, short[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static short[,] AddToDiagonal(this int a, double[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this int a, double[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this int[] a, double[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a[j] + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this int[] a, double[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i] + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this int[,] a, double b, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this int[][] a, double b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b);
            return result;
        }

        public static short[,] AddToDiagonal(this int[,] a, double[] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b[j]);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this int[][] a, double[] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this int[][] a, double[,] b, float[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (float)((float)a[i][j] + (float)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this int[,] a, double[][] b, float[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this int[,] a, double[,] b, float[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (double* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this int[][] a, double[,] b, float[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)(a[i][j]) + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this int[,] a, double[][] b, float[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this int[][] a, double[][] b, float[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (float)((float)(a[i][j]) + (float)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this int[,] a, double[,] b, float[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (double* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this int[,] a, double b, float[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this int[][] a, double b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this int[][] a, double b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this int a, double[,] b, float[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)a +  (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this int a, double[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (float)((float)a + (float)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this int a, double[][] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (float)((float)a + (float)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this int a, double[,] b, float[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this int[,] a, double b, float[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this int[,] a, double b, float[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this int[][] a, double b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this int[] a, double[] b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[] Add(this int[] a, double b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this int a, double[] b, float[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (float)((float)a + (float)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[,] Add(this int[,] a,  double[] b, int dimension, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[][] Add(this int[][] a,  double[] b, int dimension, float[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static float[,] AddToDiagonal(this int a, double[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this int a, double[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this int[] a, double[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a[j] + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this int[] a, double[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i] + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this int[,] a, double b, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this int[][] a, double b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b);
            return result;
        }

        public static float[,] AddToDiagonal(this int[,] a, double[] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b[j]);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this int[][] a, double[] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this int[][] a, double[,] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (double)((double)a[i][j] + (double)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this int[,] a, double[][] b, double[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this int[,] a, double[,] b, double[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (double* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this int[][] a, double[,] b, double[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)(a[i][j]) + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this int[,] a, double[][] b, double[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this int[][] a, double[][] b, double[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (double)((double)(a[i][j]) + (double)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this int[,] a, double[,] b, double[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (double* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this int[,] a, double b, double[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this int[][] a, double b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this int[][] a, double b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this int a, double[,] b, double[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)a +  (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this int a, double[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (double)((double)a + (double)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this int a, double[][] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (double)((double)a + (double)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this int a, double[,] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this int[,] a, double b, double[,] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this int[,] a, double b, double[][] result)
        {
            unsafe
            {
                fixed (int* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this int[][] a, double b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this int[] a, double[] b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[] Add(this int[] a, double b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this int a, double[] b, double[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (double)((double)a + (double)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[,] Add(this int[,] a,  double[] b, int dimension, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[][] Add(this int[][] a,  double[] b, int dimension, double[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static double[,] AddToDiagonal(this int a, double[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this int a, double[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this int[] a, double[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a[j] + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this int[] a, double[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i] + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this int[,] a, double b, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this int[][] a, double b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b);
            return result;
        }

        public static double[,] AddToDiagonal(this int[,] a, double[] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b[j]);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this int[][] a, double[] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this short[][] a, int[,] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (int)((int)a[i][j] + (int)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this short[,] a, int[][] b, int[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this short[,] a, int[,] b, int[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (int* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this short[][] a, int[,] b, int[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)(a[i][j]) + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this short[,] a, int[][] b, int[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this short[][] a, int[][] b, int[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (int)((int)(a[i][j]) + (int)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this short[,] a, int[,] b, int[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (int* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this short[,] a, int b, int[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this short[][] a, int b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this short[][] a, int b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this short a, int[,] b, int[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)a +  (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this short a, int[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (int)((int)a + (int)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this short a, int[][] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (int)((int)a + (int)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this short a, int[,] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this short[,] a, int b, int[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this short[,] a, int b, int[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this short[][] a, int b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this short[] a, int[] b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[] Add(this short[] a, int b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this short a, int[] b, int[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (int)((int)a + (int)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[,] Add(this short[,] a,  int[] b, int dimension, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[][] Add(this short[][] a,  int[] b, int dimension, int[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static int[,] AddToDiagonal(this short a, int[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this short a, int[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this short[] a, int[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a[j] + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this short[] a, int[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i] + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this short[,] a, int b, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this short[][] a, int b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b);
            return result;
        }

        public static int[,] AddToDiagonal(this short[,] a, int[] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b[j]);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this short[][] a, int[] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this short[][] a, int[,] b, short[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (short)((short)a[i][j] + (short)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this short[,] a, int[][] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this short[,] a, int[,] b, short[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (int* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this short[][] a, int[,] b, short[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)(a[i][j]) + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this short[,] a, int[][] b, short[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this short[][] a, int[][] b, short[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (short)((short)(a[i][j]) + (short)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this short[,] a, int[,] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (int* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this short[,] a, int b, short[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this short[][] a, int b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this short[][] a, int b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this short a, int[,] b, short[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)a +  (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this short a, int[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (short)((short)a + (short)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this short a, int[][] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (short)((short)a + (short)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this short a, int[,] b, short[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this short[,] a, int b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this short[,] a, int b, short[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this short[][] a, int b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this short[] a, int[] b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[] Add(this short[] a, int b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this short a, int[] b, short[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (short)((short)a + (short)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[,] Add(this short[,] a,  int[] b, int dimension, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[][] Add(this short[][] a,  int[] b, int dimension, short[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static short[,] AddToDiagonal(this short a, int[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this short a, int[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this short[] a, int[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a[j] + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this short[] a, int[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i] + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this short[,] a, int b, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this short[][] a, int b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b);
            return result;
        }

        public static short[,] AddToDiagonal(this short[,] a, int[] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b[j]);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this short[][] a, int[] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this short[][] a, int[,] b, float[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (float)((float)a[i][j] + (float)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this short[,] a, int[][] b, float[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this short[,] a, int[,] b, float[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (int* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this short[][] a, int[,] b, float[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)(a[i][j]) + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this short[,] a, int[][] b, float[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this short[][] a, int[][] b, float[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (float)((float)(a[i][j]) + (float)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this short[,] a, int[,] b, float[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (int* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this short[,] a, int b, float[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this short[][] a, int b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this short[][] a, int b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this short a, int[,] b, float[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)a +  (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this short a, int[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (float)((float)a + (float)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this short a, int[][] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (float)((float)a + (float)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this short a, int[,] b, float[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this short[,] a, int b, float[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this short[,] a, int b, float[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this short[][] a, int b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this short[] a, int[] b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[] Add(this short[] a, int b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this short a, int[] b, float[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (float)((float)a + (float)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[,] Add(this short[,] a,  int[] b, int dimension, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[][] Add(this short[][] a,  int[] b, int dimension, float[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static float[,] AddToDiagonal(this short a, int[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this short a, int[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this short[] a, int[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a[j] + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this short[] a, int[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i] + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this short[,] a, int b, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this short[][] a, int b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b);
            return result;
        }

        public static float[,] AddToDiagonal(this short[,] a, int[] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b[j]);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this short[][] a, int[] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this short[][] a, int[,] b, double[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (double)((double)a[i][j] + (double)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this short[,] a, int[][] b, double[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this short[,] a, int[,] b, double[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (int* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this short[][] a, int[,] b, double[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)(a[i][j]) + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this short[,] a, int[][] b, double[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this short[][] a, int[][] b, double[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (double)((double)(a[i][j]) + (double)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this short[,] a, int[,] b, double[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (int* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this short[,] a, int b, double[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this short[][] a, int b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this short[][] a, int b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this short a, int[,] b, double[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)a +  (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this short a, int[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (double)((double)a + (double)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this short a, int[][] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (double)((double)a + (double)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this short a, int[,] b, double[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this short[,] a, int b, double[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this short[,] a, int b, double[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this short[][] a, int b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this short[] a, int[] b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[] Add(this short[] a, int b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this short a, int[] b, double[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (double)((double)a + (double)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[,] Add(this short[,] a,  int[] b, int dimension, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[][] Add(this short[][] a,  int[] b, int dimension, double[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static double[,] AddToDiagonal(this short a, int[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this short a, int[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this short[] a, int[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a[j] + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this short[] a, int[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i] + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this short[,] a, int b, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this short[][] a, int b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b);
            return result;
        }

        public static double[,] AddToDiagonal(this short[,] a, int[] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b[j]);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this short[][] a, int[] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this short[][] a, short[,] b, int[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (int)((int)a[i][j] + (int)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this short[,] a, short[][] b, int[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this short[,] a, short[,] b, int[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (short* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this short[][] a, short[,] b, int[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)(a[i][j]) + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this short[,] a, short[][] b, int[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this short[][] a, short[][] b, int[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (int)((int)(a[i][j]) + (int)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this short[,] a, short[,] b, int[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (short* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this short[,] a, short b, int[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this short[][] a, short b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this short[][] a, short b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this short a, short[,] b, int[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)a +  (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this short a, short[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (int)((int)a + (int)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this short a, short[][] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (int)((int)a + (int)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this short a, short[,] b, int[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this short[,] a, short b, int[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this short[,] a, short b, int[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this short[][] a, short b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this short[] a, short[] b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[] Add(this short[] a, short b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this short a, short[] b, int[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (int)((int)a + (int)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[,] Add(this short[,] a,  short[] b, int dimension, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[][] Add(this short[][] a,  short[] b, int dimension, int[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static int[,] AddToDiagonal(this short a, short[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this short a, short[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this short[] a, short[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a[j] + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this short[] a, short[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i] + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this short[,] a, short b, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this short[][] a, short b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b);
            return result;
        }

        public static int[,] AddToDiagonal(this short[,] a, short[] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b[j]);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this short[][] a, short[] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this short[][] a, short[,] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (short)((short)a[i][j] + (short)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this short[,] a, short[][] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this short[,] a, short[,] b, short[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (short* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this short[][] a, short[,] b, short[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)(a[i][j]) + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this short[,] a, short[][] b, short[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this short[][] a, short[][] b, short[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (short)((short)(a[i][j]) + (short)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this short[,] a, short[,] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (short* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this short[,] a, short b, short[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this short[][] a, short b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this short[][] a, short b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this short a, short[,] b, short[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)a +  (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this short a, short[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (short)((short)a + (short)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this short a, short[][] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (short)((short)a + (short)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this short a, short[,] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this short[,] a, short b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this short[,] a, short b, short[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this short[][] a, short b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this short[] a, short[] b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[] Add(this short[] a, short b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this short a, short[] b, short[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (short)((short)a + (short)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[,] Add(this short[,] a,  short[] b, int dimension, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[][] Add(this short[][] a,  short[] b, int dimension, short[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static short[,] AddToDiagonal(this short a, short[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this short a, short[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this short[] a, short[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a[j] + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this short[] a, short[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i] + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this short[,] a, short b, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this short[][] a, short b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b);
            return result;
        }

        public static short[,] AddToDiagonal(this short[,] a, short[] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b[j]);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this short[][] a, short[] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this short[][] a, short[,] b, float[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (float)((float)a[i][j] + (float)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this short[,] a, short[][] b, float[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this short[,] a, short[,] b, float[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (short* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this short[][] a, short[,] b, float[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)(a[i][j]) + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this short[,] a, short[][] b, float[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this short[][] a, short[][] b, float[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (float)((float)(a[i][j]) + (float)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this short[,] a, short[,] b, float[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (short* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this short[,] a, short b, float[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this short[][] a, short b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this short[][] a, short b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this short a, short[,] b, float[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)a +  (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this short a, short[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (float)((float)a + (float)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this short a, short[][] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (float)((float)a + (float)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this short a, short[,] b, float[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this short[,] a, short b, float[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this short[,] a, short b, float[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this short[][] a, short b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this short[] a, short[] b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[] Add(this short[] a, short b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this short a, short[] b, float[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (float)((float)a + (float)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[,] Add(this short[,] a,  short[] b, int dimension, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[][] Add(this short[][] a,  short[] b, int dimension, float[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static float[,] AddToDiagonal(this short a, short[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this short a, short[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this short[] a, short[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a[j] + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this short[] a, short[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i] + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this short[,] a, short b, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this short[][] a, short b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b);
            return result;
        }

        public static float[,] AddToDiagonal(this short[,] a, short[] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b[j]);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this short[][] a, short[] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this short[][] a, short[,] b, double[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (double)((double)a[i][j] + (double)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this short[,] a, short[][] b, double[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this short[,] a, short[,] b, double[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (short* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this short[][] a, short[,] b, double[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)(a[i][j]) + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this short[,] a, short[][] b, double[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this short[][] a, short[][] b, double[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (double)((double)(a[i][j]) + (double)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this short[,] a, short[,] b, double[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (short* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this short[,] a, short b, double[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this short[][] a, short b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this short[][] a, short b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this short a, short[,] b, double[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)a +  (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this short a, short[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (double)((double)a + (double)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this short a, short[][] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (double)((double)a + (double)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this short a, short[,] b, double[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this short[,] a, short b, double[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this short[,] a, short b, double[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this short[][] a, short b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this short[] a, short[] b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[] Add(this short[] a, short b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this short a, short[] b, double[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (double)((double)a + (double)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[,] Add(this short[,] a,  short[] b, int dimension, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[][] Add(this short[][] a,  short[] b, int dimension, double[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static double[,] AddToDiagonal(this short a, short[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this short a, short[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this short[] a, short[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a[j] + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this short[] a, short[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i] + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this short[,] a, short b, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this short[][] a, short b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b);
            return result;
        }

        public static double[,] AddToDiagonal(this short[,] a, short[] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b[j]);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this short[][] a, short[] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this short[][] a, float[,] b, int[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (int)((int)a[i][j] + (int)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this short[,] a, float[][] b, int[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this short[,] a, float[,] b, int[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (float* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this short[][] a, float[,] b, int[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)(a[i][j]) + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this short[,] a, float[][] b, int[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this short[][] a, float[][] b, int[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (int)((int)(a[i][j]) + (int)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this short[,] a, float[,] b, int[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (float* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this short[,] a, float b, int[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this short[][] a, float b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this short[][] a, float b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this short a, float[,] b, int[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)a +  (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this short a, float[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (int)((int)a + (int)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this short a, float[][] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (int)((int)a + (int)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this short a, float[,] b, int[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this short[,] a, float b, int[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this short[,] a, float b, int[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this short[][] a, float b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this short[] a, float[] b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[] Add(this short[] a, float b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this short a, float[] b, int[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (int)((int)a + (int)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[,] Add(this short[,] a,  float[] b, int dimension, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[][] Add(this short[][] a,  float[] b, int dimension, int[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static int[,] AddToDiagonal(this short a, float[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this short a, float[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this short[] a, float[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a[j] + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this short[] a, float[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i] + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this short[,] a, float b, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this short[][] a, float b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b);
            return result;
        }

        public static int[,] AddToDiagonal(this short[,] a, float[] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b[j]);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this short[][] a, float[] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this short[][] a, float[,] b, short[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (short)((short)a[i][j] + (short)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this short[,] a, float[][] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this short[,] a, float[,] b, short[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (float* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this short[][] a, float[,] b, short[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)(a[i][j]) + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this short[,] a, float[][] b, short[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this short[][] a, float[][] b, short[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (short)((short)(a[i][j]) + (short)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this short[,] a, float[,] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (float* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this short[,] a, float b, short[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this short[][] a, float b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this short[][] a, float b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this short a, float[,] b, short[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)a +  (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this short a, float[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (short)((short)a + (short)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this short a, float[][] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (short)((short)a + (short)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this short a, float[,] b, short[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this short[,] a, float b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this short[,] a, float b, short[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this short[][] a, float b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this short[] a, float[] b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[] Add(this short[] a, float b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this short a, float[] b, short[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (short)((short)a + (short)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[,] Add(this short[,] a,  float[] b, int dimension, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[][] Add(this short[][] a,  float[] b, int dimension, short[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static short[,] AddToDiagonal(this short a, float[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this short a, float[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this short[] a, float[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a[j] + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this short[] a, float[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i] + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this short[,] a, float b, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this short[][] a, float b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b);
            return result;
        }

        public static short[,] AddToDiagonal(this short[,] a, float[] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b[j]);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this short[][] a, float[] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this short[][] a, float[,] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (float)((float)a[i][j] + (float)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this short[,] a, float[][] b, float[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this short[,] a, float[,] b, float[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (float* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this short[][] a, float[,] b, float[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)(a[i][j]) + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this short[,] a, float[][] b, float[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this short[][] a, float[][] b, float[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (float)((float)(a[i][j]) + (float)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this short[,] a, float[,] b, float[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (float* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this short[,] a, float b, float[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this short[][] a, float b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this short[][] a, float b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this short a, float[,] b, float[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)a +  (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this short a, float[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (float)((float)a + (float)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this short a, float[][] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (float)((float)a + (float)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this short a, float[,] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this short[,] a, float b, float[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this short[,] a, float b, float[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this short[][] a, float b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this short[] a, float[] b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[] Add(this short[] a, float b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this short a, float[] b, float[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (float)((float)a + (float)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[,] Add(this short[,] a,  float[] b, int dimension, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[][] Add(this short[][] a,  float[] b, int dimension, float[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static float[,] AddToDiagonal(this short a, float[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this short a, float[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this short[] a, float[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a[j] + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this short[] a, float[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i] + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this short[,] a, float b, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this short[][] a, float b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b);
            return result;
        }

        public static float[,] AddToDiagonal(this short[,] a, float[] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b[j]);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this short[][] a, float[] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this short[][] a, float[,] b, double[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (double)((double)a[i][j] + (double)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this short[,] a, float[][] b, double[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this short[,] a, float[,] b, double[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (float* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this short[][] a, float[,] b, double[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)(a[i][j]) + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this short[,] a, float[][] b, double[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this short[][] a, float[][] b, double[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (double)((double)(a[i][j]) + (double)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this short[,] a, float[,] b, double[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (float* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this short[,] a, float b, double[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this short[][] a, float b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this short[][] a, float b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this short a, float[,] b, double[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)a +  (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this short a, float[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (double)((double)a + (double)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this short a, float[][] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (double)((double)a + (double)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this short a, float[,] b, double[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this short[,] a, float b, double[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this short[,] a, float b, double[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this short[][] a, float b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this short[] a, float[] b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[] Add(this short[] a, float b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this short a, float[] b, double[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (double)((double)a + (double)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[,] Add(this short[,] a,  float[] b, int dimension, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[][] Add(this short[][] a,  float[] b, int dimension, double[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static double[,] AddToDiagonal(this short a, float[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this short a, float[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this short[] a, float[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a[j] + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this short[] a, float[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i] + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this short[,] a, float b, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this short[][] a, float b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b);
            return result;
        }

        public static double[,] AddToDiagonal(this short[,] a, float[] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b[j]);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this short[][] a, float[] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this short[][] a, double[,] b, int[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (int)((int)a[i][j] + (int)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this short[,] a, double[][] b, int[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this short[,] a, double[,] b, int[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (double* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this short[][] a, double[,] b, int[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)(a[i][j]) + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this short[,] a, double[][] b, int[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this short[][] a, double[][] b, int[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (int)((int)(a[i][j]) + (int)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this short[,] a, double[,] b, int[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (double* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this short[,] a, double b, int[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this short[][] a, double b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this short[][] a, double b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this short a, double[,] b, int[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)a +  (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this short a, double[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (int)((int)a + (int)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this short a, double[][] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (int)((int)a + (int)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this short a, double[,] b, int[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this short[,] a, double b, int[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this short[,] a, double b, int[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this short[][] a, double b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this short[] a, double[] b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[] Add(this short[] a, double b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this short a, double[] b, int[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (int)((int)a + (int)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[,] Add(this short[,] a,  double[] b, int dimension, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[][] Add(this short[][] a,  double[] b, int dimension, int[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static int[,] AddToDiagonal(this short a, double[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this short a, double[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this short[] a, double[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a[j] + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this short[] a, double[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i] + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this short[,] a, double b, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this short[][] a, double b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b);
            return result;
        }

        public static int[,] AddToDiagonal(this short[,] a, double[] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b[j]);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this short[][] a, double[] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this short[][] a, double[,] b, short[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (short)((short)a[i][j] + (short)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this short[,] a, double[][] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this short[,] a, double[,] b, short[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (double* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this short[][] a, double[,] b, short[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)(a[i][j]) + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this short[,] a, double[][] b, short[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this short[][] a, double[][] b, short[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (short)((short)(a[i][j]) + (short)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this short[,] a, double[,] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (double* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this short[,] a, double b, short[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this short[][] a, double b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this short[][] a, double b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this short a, double[,] b, short[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)a +  (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this short a, double[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (short)((short)a + (short)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this short a, double[][] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (short)((short)a + (short)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this short a, double[,] b, short[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this short[,] a, double b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this short[,] a, double b, short[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this short[][] a, double b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this short[] a, double[] b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[] Add(this short[] a, double b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this short a, double[] b, short[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (short)((short)a + (short)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[,] Add(this short[,] a,  double[] b, int dimension, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[][] Add(this short[][] a,  double[] b, int dimension, short[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static short[,] AddToDiagonal(this short a, double[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this short a, double[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this short[] a, double[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a[j] + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this short[] a, double[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i] + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this short[,] a, double b, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this short[][] a, double b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b);
            return result;
        }

        public static short[,] AddToDiagonal(this short[,] a, double[] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b[j]);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this short[][] a, double[] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this short[][] a, double[,] b, float[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (float)((float)a[i][j] + (float)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this short[,] a, double[][] b, float[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this short[,] a, double[,] b, float[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (double* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this short[][] a, double[,] b, float[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)(a[i][j]) + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this short[,] a, double[][] b, float[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this short[][] a, double[][] b, float[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (float)((float)(a[i][j]) + (float)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this short[,] a, double[,] b, float[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (double* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this short[,] a, double b, float[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this short[][] a, double b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this short[][] a, double b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this short a, double[,] b, float[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)a +  (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this short a, double[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (float)((float)a + (float)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this short a, double[][] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (float)((float)a + (float)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this short a, double[,] b, float[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this short[,] a, double b, float[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this short[,] a, double b, float[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this short[][] a, double b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this short[] a, double[] b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[] Add(this short[] a, double b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this short a, double[] b, float[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (float)((float)a + (float)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[,] Add(this short[,] a,  double[] b, int dimension, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[][] Add(this short[][] a,  double[] b, int dimension, float[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static float[,] AddToDiagonal(this short a, double[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this short a, double[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this short[] a, double[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a[j] + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this short[] a, double[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i] + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this short[,] a, double b, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this short[][] a, double b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b);
            return result;
        }

        public static float[,] AddToDiagonal(this short[,] a, double[] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b[j]);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this short[][] a, double[] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this short[][] a, double[,] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (double)((double)a[i][j] + (double)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this short[,] a, double[][] b, double[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this short[,] a, double[,] b, double[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (double* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this short[][] a, double[,] b, double[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)(a[i][j]) + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this short[,] a, double[][] b, double[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this short[][] a, double[][] b, double[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (double)((double)(a[i][j]) + (double)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this short[,] a, double[,] b, double[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (double* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this short[,] a, double b, double[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this short[][] a, double b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this short[][] a, double b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this short a, double[,] b, double[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)a +  (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this short a, double[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (double)((double)a + (double)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this short a, double[][] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (double)((double)a + (double)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this short a, double[,] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this short[,] a, double b, double[,] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this short[,] a, double b, double[][] result)
        {
            unsafe
            {
                fixed (short* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this short[][] a, double b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this short[] a, double[] b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[] Add(this short[] a, double b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this short a, double[] b, double[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (double)((double)a + (double)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[,] Add(this short[,] a,  double[] b, int dimension, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[][] Add(this short[][] a,  double[] b, int dimension, double[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static double[,] AddToDiagonal(this short a, double[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this short a, double[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this short[] a, double[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a[j] + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this short[] a, double[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i] + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this short[,] a, double b, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this short[][] a, double b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b);
            return result;
        }

        public static double[,] AddToDiagonal(this short[,] a, double[] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b[j]);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this short[][] a, double[] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this float[][] a, int[,] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (int)((int)a[i][j] + (int)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this float[,] a, int[][] b, int[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this float[,] a, int[,] b, int[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (int* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this float[][] a, int[,] b, int[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)(a[i][j]) + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this float[,] a, int[][] b, int[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this float[][] a, int[][] b, int[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (int)((int)(a[i][j]) + (int)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this float[,] a, int[,] b, int[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (int* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this float[,] a, int b, int[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this float[][] a, int b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this float[][] a, int b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this float a, int[,] b, int[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)a +  (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this float a, int[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (int)((int)a + (int)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this float a, int[][] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (int)((int)a + (int)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this float a, int[,] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this float[,] a, int b, int[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this float[,] a, int b, int[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this float[][] a, int b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this float[] a, int[] b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[] Add(this float[] a, int b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this float a, int[] b, int[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (int)((int)a + (int)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[,] Add(this float[,] a,  int[] b, int dimension, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[][] Add(this float[][] a,  int[] b, int dimension, int[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static int[,] AddToDiagonal(this float a, int[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this float a, int[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this float[] a, int[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a[j] + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this float[] a, int[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i] + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this float[,] a, int b, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this float[][] a, int b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b);
            return result;
        }

        public static int[,] AddToDiagonal(this float[,] a, int[] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b[j]);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this float[][] a, int[] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this float[][] a, int[,] b, short[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (short)((short)a[i][j] + (short)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this float[,] a, int[][] b, short[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this float[,] a, int[,] b, short[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (int* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this float[][] a, int[,] b, short[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)(a[i][j]) + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this float[,] a, int[][] b, short[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this float[][] a, int[][] b, short[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (short)((short)(a[i][j]) + (short)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this float[,] a, int[,] b, short[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (int* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this float[,] a, int b, short[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this float[][] a, int b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this float[][] a, int b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this float a, int[,] b, short[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)a +  (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this float a, int[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (short)((short)a + (short)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this float a, int[][] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (short)((short)a + (short)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this float a, int[,] b, short[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this float[,] a, int b, short[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this float[,] a, int b, short[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this float[][] a, int b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this float[] a, int[] b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[] Add(this float[] a, int b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this float a, int[] b, short[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (short)((short)a + (short)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[,] Add(this float[,] a,  int[] b, int dimension, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[][] Add(this float[][] a,  int[] b, int dimension, short[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static short[,] AddToDiagonal(this float a, int[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this float a, int[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this float[] a, int[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a[j] + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this float[] a, int[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i] + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this float[,] a, int b, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this float[][] a, int b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b);
            return result;
        }

        public static short[,] AddToDiagonal(this float[,] a, int[] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b[j]);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this float[][] a, int[] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this float[][] a, int[,] b, float[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (float)((float)a[i][j] + (float)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this float[,] a, int[][] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this float[,] a, int[,] b, float[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (int* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this float[][] a, int[,] b, float[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)(a[i][j]) + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this float[,] a, int[][] b, float[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this float[][] a, int[][] b, float[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (float)((float)(a[i][j]) + (float)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this float[,] a, int[,] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (int* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this float[,] a, int b, float[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this float[][] a, int b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this float[][] a, int b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this float a, int[,] b, float[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)a +  (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this float a, int[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (float)((float)a + (float)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this float a, int[][] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (float)((float)a + (float)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this float a, int[,] b, float[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this float[,] a, int b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this float[,] a, int b, float[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this float[][] a, int b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this float[] a, int[] b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[] Add(this float[] a, int b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this float a, int[] b, float[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (float)((float)a + (float)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[,] Add(this float[,] a,  int[] b, int dimension, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[][] Add(this float[][] a,  int[] b, int dimension, float[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static float[,] AddToDiagonal(this float a, int[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this float a, int[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this float[] a, int[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a[j] + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this float[] a, int[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i] + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this float[,] a, int b, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this float[][] a, int b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b);
            return result;
        }

        public static float[,] AddToDiagonal(this float[,] a, int[] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b[j]);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this float[][] a, int[] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this float[][] a, int[,] b, double[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (double)((double)a[i][j] + (double)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this float[,] a, int[][] b, double[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this float[,] a, int[,] b, double[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (int* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this float[][] a, int[,] b, double[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)(a[i][j]) + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this float[,] a, int[][] b, double[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this float[][] a, int[][] b, double[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (double)((double)(a[i][j]) + (double)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this float[,] a, int[,] b, double[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (int* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this float[,] a, int b, double[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this float[][] a, int b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this float[][] a, int b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this float a, int[,] b, double[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)a +  (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this float a, int[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (double)((double)a + (double)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this float a, int[][] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (double)((double)a + (double)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this float a, int[,] b, double[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this float[,] a, int b, double[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this float[,] a, int b, double[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this float[][] a, int b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this float[] a, int[] b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[] Add(this float[] a, int b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this float a, int[] b, double[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (double)((double)a + (double)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[,] Add(this float[,] a,  int[] b, int dimension, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[][] Add(this float[][] a,  int[] b, int dimension, double[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static double[,] AddToDiagonal(this float a, int[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this float a, int[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this float[] a, int[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a[j] + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this float[] a, int[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i] + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this float[,] a, int b, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this float[][] a, int b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b);
            return result;
        }

        public static double[,] AddToDiagonal(this float[,] a, int[] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b[j]);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this float[][] a, int[] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this float[][] a, short[,] b, int[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (int)((int)a[i][j] + (int)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this float[,] a, short[][] b, int[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this float[,] a, short[,] b, int[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (short* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this float[][] a, short[,] b, int[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)(a[i][j]) + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this float[,] a, short[][] b, int[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this float[][] a, short[][] b, int[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (int)((int)(a[i][j]) + (int)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this float[,] a, short[,] b, int[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (short* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this float[,] a, short b, int[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this float[][] a, short b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this float[][] a, short b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this float a, short[,] b, int[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)a +  (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this float a, short[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (int)((int)a + (int)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this float a, short[][] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (int)((int)a + (int)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this float a, short[,] b, int[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this float[,] a, short b, int[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this float[,] a, short b, int[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this float[][] a, short b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this float[] a, short[] b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[] Add(this float[] a, short b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this float a, short[] b, int[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (int)((int)a + (int)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[,] Add(this float[,] a,  short[] b, int dimension, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[][] Add(this float[][] a,  short[] b, int dimension, int[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static int[,] AddToDiagonal(this float a, short[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this float a, short[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this float[] a, short[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a[j] + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this float[] a, short[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i] + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this float[,] a, short b, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this float[][] a, short b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b);
            return result;
        }

        public static int[,] AddToDiagonal(this float[,] a, short[] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b[j]);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this float[][] a, short[] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this float[][] a, short[,] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (short)((short)a[i][j] + (short)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this float[,] a, short[][] b, short[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this float[,] a, short[,] b, short[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (short* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this float[][] a, short[,] b, short[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)(a[i][j]) + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this float[,] a, short[][] b, short[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this float[][] a, short[][] b, short[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (short)((short)(a[i][j]) + (short)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this float[,] a, short[,] b, short[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (short* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this float[,] a, short b, short[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this float[][] a, short b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this float[][] a, short b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this float a, short[,] b, short[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)a +  (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this float a, short[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (short)((short)a + (short)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this float a, short[][] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (short)((short)a + (short)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this float a, short[,] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this float[,] a, short b, short[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this float[,] a, short b, short[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this float[][] a, short b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this float[] a, short[] b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[] Add(this float[] a, short b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this float a, short[] b, short[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (short)((short)a + (short)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[,] Add(this float[,] a,  short[] b, int dimension, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[][] Add(this float[][] a,  short[] b, int dimension, short[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static short[,] AddToDiagonal(this float a, short[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this float a, short[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this float[] a, short[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a[j] + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this float[] a, short[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i] + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this float[,] a, short b, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this float[][] a, short b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b);
            return result;
        }

        public static short[,] AddToDiagonal(this float[,] a, short[] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b[j]);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this float[][] a, short[] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this float[][] a, short[,] b, float[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (float)((float)a[i][j] + (float)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this float[,] a, short[][] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this float[,] a, short[,] b, float[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (short* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this float[][] a, short[,] b, float[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)(a[i][j]) + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this float[,] a, short[][] b, float[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this float[][] a, short[][] b, float[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (float)((float)(a[i][j]) + (float)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this float[,] a, short[,] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (short* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this float[,] a, short b, float[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this float[][] a, short b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this float[][] a, short b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this float a, short[,] b, float[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)a +  (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this float a, short[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (float)((float)a + (float)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this float a, short[][] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (float)((float)a + (float)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this float a, short[,] b, float[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this float[,] a, short b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this float[,] a, short b, float[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this float[][] a, short b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this float[] a, short[] b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[] Add(this float[] a, short b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this float a, short[] b, float[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (float)((float)a + (float)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[,] Add(this float[,] a,  short[] b, int dimension, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[][] Add(this float[][] a,  short[] b, int dimension, float[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static float[,] AddToDiagonal(this float a, short[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this float a, short[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this float[] a, short[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a[j] + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this float[] a, short[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i] + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this float[,] a, short b, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this float[][] a, short b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b);
            return result;
        }

        public static float[,] AddToDiagonal(this float[,] a, short[] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b[j]);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this float[][] a, short[] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this float[][] a, short[,] b, double[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (double)((double)a[i][j] + (double)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this float[,] a, short[][] b, double[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this float[,] a, short[,] b, double[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (short* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this float[][] a, short[,] b, double[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)(a[i][j]) + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this float[,] a, short[][] b, double[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this float[][] a, short[][] b, double[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (double)((double)(a[i][j]) + (double)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this float[,] a, short[,] b, double[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (short* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this float[,] a, short b, double[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this float[][] a, short b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this float[][] a, short b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this float a, short[,] b, double[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)a +  (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this float a, short[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (double)((double)a + (double)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this float a, short[][] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (double)((double)a + (double)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this float a, short[,] b, double[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this float[,] a, short b, double[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this float[,] a, short b, double[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this float[][] a, short b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this float[] a, short[] b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[] Add(this float[] a, short b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this float a, short[] b, double[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (double)((double)a + (double)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[,] Add(this float[,] a,  short[] b, int dimension, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[][] Add(this float[][] a,  short[] b, int dimension, double[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static double[,] AddToDiagonal(this float a, short[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this float a, short[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this float[] a, short[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a[j] + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this float[] a, short[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i] + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this float[,] a, short b, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this float[][] a, short b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b);
            return result;
        }

        public static double[,] AddToDiagonal(this float[,] a, short[] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b[j]);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this float[][] a, short[] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this float[][] a, float[,] b, int[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (int)((int)a[i][j] + (int)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this float[,] a, float[][] b, int[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this float[,] a, float[,] b, int[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (float* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this float[][] a, float[,] b, int[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)(a[i][j]) + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this float[,] a, float[][] b, int[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this float[][] a, float[][] b, int[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (int)((int)(a[i][j]) + (int)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this float[,] a, float[,] b, int[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (float* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this float[,] a, float b, int[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this float[][] a, float b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this float[][] a, float b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this float a, float[,] b, int[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)a +  (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this float a, float[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (int)((int)a + (int)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this float a, float[][] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (int)((int)a + (int)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this float a, float[,] b, int[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this float[,] a, float b, int[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this float[,] a, float b, int[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this float[][] a, float b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this float[] a, float[] b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[] Add(this float[] a, float b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this float a, float[] b, int[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (int)((int)a + (int)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[,] Add(this float[,] a,  float[] b, int dimension, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[][] Add(this float[][] a,  float[] b, int dimension, int[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static int[,] AddToDiagonal(this float a, float[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this float a, float[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this float[] a, float[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a[j] + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this float[] a, float[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i] + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this float[,] a, float b, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this float[][] a, float b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b);
            return result;
        }

        public static int[,] AddToDiagonal(this float[,] a, float[] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b[j]);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this float[][] a, float[] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this float[][] a, float[,] b, short[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (short)((short)a[i][j] + (short)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this float[,] a, float[][] b, short[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this float[,] a, float[,] b, short[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (float* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this float[][] a, float[,] b, short[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)(a[i][j]) + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this float[,] a, float[][] b, short[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this float[][] a, float[][] b, short[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (short)((short)(a[i][j]) + (short)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this float[,] a, float[,] b, short[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (float* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this float[,] a, float b, short[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this float[][] a, float b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this float[][] a, float b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this float a, float[,] b, short[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)a +  (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this float a, float[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (short)((short)a + (short)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this float a, float[][] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (short)((short)a + (short)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this float a, float[,] b, short[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this float[,] a, float b, short[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this float[,] a, float b, short[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this float[][] a, float b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this float[] a, float[] b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[] Add(this float[] a, float b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this float a, float[] b, short[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (short)((short)a + (short)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[,] Add(this float[,] a,  float[] b, int dimension, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[][] Add(this float[][] a,  float[] b, int dimension, short[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static short[,] AddToDiagonal(this float a, float[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this float a, float[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this float[] a, float[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a[j] + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this float[] a, float[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i] + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this float[,] a, float b, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this float[][] a, float b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b);
            return result;
        }

        public static short[,] AddToDiagonal(this float[,] a, float[] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b[j]);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this float[][] a, float[] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this float[][] a, float[,] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (float)((float)a[i][j] + (float)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this float[,] a, float[][] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this float[,] a, float[,] b, float[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (float* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this float[][] a, float[,] b, float[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)(a[i][j]) + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this float[,] a, float[][] b, float[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this float[][] a, float[][] b, float[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (float)((float)(a[i][j]) + (float)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this float[,] a, float[,] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (float* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this float[,] a, float b, float[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this float[][] a, float b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this float[][] a, float b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this float a, float[,] b, float[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)a +  (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this float a, float[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (float)((float)a + (float)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this float a, float[][] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (float)((float)a + (float)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this float a, float[,] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this float[,] a, float b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this float[,] a, float b, float[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this float[][] a, float b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this float[] a, float[] b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[] Add(this float[] a, float b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this float a, float[] b, float[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (float)((float)a + (float)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[,] Add(this float[,] a,  float[] b, int dimension, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[][] Add(this float[][] a,  float[] b, int dimension, float[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static float[,] AddToDiagonal(this float a, float[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this float a, float[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this float[] a, float[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a[j] + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this float[] a, float[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i] + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this float[,] a, float b, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this float[][] a, float b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b);
            return result;
        }

        public static float[,] AddToDiagonal(this float[,] a, float[] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b[j]);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this float[][] a, float[] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this float[][] a, float[,] b, double[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (double)((double)a[i][j] + (double)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this float[,] a, float[][] b, double[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this float[,] a, float[,] b, double[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (float* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this float[][] a, float[,] b, double[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)(a[i][j]) + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this float[,] a, float[][] b, double[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this float[][] a, float[][] b, double[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (double)((double)(a[i][j]) + (double)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this float[,] a, float[,] b, double[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (float* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this float[,] a, float b, double[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this float[][] a, float b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this float[][] a, float b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this float a, float[,] b, double[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)a +  (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this float a, float[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (double)((double)a + (double)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this float a, float[][] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (double)((double)a + (double)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this float a, float[,] b, double[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this float[,] a, float b, double[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this float[,] a, float b, double[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this float[][] a, float b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this float[] a, float[] b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[] Add(this float[] a, float b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this float a, float[] b, double[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (double)((double)a + (double)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[,] Add(this float[,] a,  float[] b, int dimension, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[][] Add(this float[][] a,  float[] b, int dimension, double[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static double[,] AddToDiagonal(this float a, float[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this float a, float[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this float[] a, float[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a[j] + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this float[] a, float[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i] + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this float[,] a, float b, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this float[][] a, float b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b);
            return result;
        }

        public static double[,] AddToDiagonal(this float[,] a, float[] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b[j]);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this float[][] a, float[] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this float[][] a, double[,] b, int[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (int)((int)a[i][j] + (int)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this float[,] a, double[][] b, int[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this float[,] a, double[,] b, int[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (double* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this float[][] a, double[,] b, int[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)(a[i][j]) + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this float[,] a, double[][] b, int[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this float[][] a, double[][] b, int[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (int)((int)(a[i][j]) + (int)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this float[,] a, double[,] b, int[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (double* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this float[,] a, double b, int[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this float[][] a, double b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this float[][] a, double b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this float a, double[,] b, int[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)a +  (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this float a, double[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (int)((int)a + (int)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this float a, double[][] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (int)((int)a + (int)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this float a, double[,] b, int[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this float[,] a, double b, int[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this float[,] a, double b, int[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this float[][] a, double b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this float[] a, double[] b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[] Add(this float[] a, double b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this float a, double[] b, int[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (int)((int)a + (int)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[,] Add(this float[,] a,  double[] b, int dimension, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[][] Add(this float[][] a,  double[] b, int dimension, int[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static int[,] AddToDiagonal(this float a, double[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this float a, double[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this float[] a, double[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a[j] + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this float[] a, double[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i] + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this float[,] a, double b, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this float[][] a, double b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b);
            return result;
        }

        public static int[,] AddToDiagonal(this float[,] a, double[] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b[j]);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this float[][] a, double[] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this float[][] a, double[,] b, short[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (short)((short)a[i][j] + (short)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this float[,] a, double[][] b, short[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this float[,] a, double[,] b, short[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (double* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this float[][] a, double[,] b, short[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)(a[i][j]) + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this float[,] a, double[][] b, short[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this float[][] a, double[][] b, short[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (short)((short)(a[i][j]) + (short)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this float[,] a, double[,] b, short[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (double* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this float[,] a, double b, short[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this float[][] a, double b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this float[][] a, double b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this float a, double[,] b, short[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)a +  (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this float a, double[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (short)((short)a + (short)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this float a, double[][] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (short)((short)a + (short)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this float a, double[,] b, short[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this float[,] a, double b, short[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this float[,] a, double b, short[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this float[][] a, double b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this float[] a, double[] b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[] Add(this float[] a, double b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this float a, double[] b, short[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (short)((short)a + (short)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[,] Add(this float[,] a,  double[] b, int dimension, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[][] Add(this float[][] a,  double[] b, int dimension, short[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static short[,] AddToDiagonal(this float a, double[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this float a, double[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this float[] a, double[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a[j] + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this float[] a, double[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i] + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this float[,] a, double b, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this float[][] a, double b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b);
            return result;
        }

        public static short[,] AddToDiagonal(this float[,] a, double[] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b[j]);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this float[][] a, double[] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this float[][] a, double[,] b, float[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (float)((float)a[i][j] + (float)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this float[,] a, double[][] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this float[,] a, double[,] b, float[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (double* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this float[][] a, double[,] b, float[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)(a[i][j]) + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this float[,] a, double[][] b, float[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this float[][] a, double[][] b, float[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (float)((float)(a[i][j]) + (float)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this float[,] a, double[,] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (double* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this float[,] a, double b, float[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this float[][] a, double b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this float[][] a, double b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this float a, double[,] b, float[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)a +  (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this float a, double[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (float)((float)a + (float)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this float a, double[][] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (float)((float)a + (float)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this float a, double[,] b, float[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this float[,] a, double b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this float[,] a, double b, float[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this float[][] a, double b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this float[] a, double[] b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[] Add(this float[] a, double b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this float a, double[] b, float[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (float)((float)a + (float)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[,] Add(this float[,] a,  double[] b, int dimension, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[][] Add(this float[][] a,  double[] b, int dimension, float[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static float[,] AddToDiagonal(this float a, double[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this float a, double[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this float[] a, double[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a[j] + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this float[] a, double[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i] + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this float[,] a, double b, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this float[][] a, double b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b);
            return result;
        }

        public static float[,] AddToDiagonal(this float[,] a, double[] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b[j]);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this float[][] a, double[] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this float[][] a, double[,] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (double)((double)a[i][j] + (double)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this float[,] a, double[][] b, double[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this float[,] a, double[,] b, double[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (double* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this float[][] a, double[,] b, double[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)(a[i][j]) + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this float[,] a, double[][] b, double[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this float[][] a, double[][] b, double[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (double)((double)(a[i][j]) + (double)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this float[,] a, double[,] b, double[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (double* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this float[,] a, double b, double[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this float[][] a, double b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this float[][] a, double b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this float a, double[,] b, double[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)a +  (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this float a, double[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (double)((double)a + (double)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this float a, double[][] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (double)((double)a + (double)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this float a, double[,] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this float[,] a, double b, double[,] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this float[,] a, double b, double[][] result)
        {
            unsafe
            {
                fixed (float* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this float[][] a, double b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this float[] a, double[] b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[] Add(this float[] a, double b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this float a, double[] b, double[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (double)((double)a + (double)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[,] Add(this float[,] a,  double[] b, int dimension, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[][] Add(this float[][] a,  double[] b, int dimension, double[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static double[,] AddToDiagonal(this float a, double[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this float a, double[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this float[] a, double[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a[j] + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this float[] a, double[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i] + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this float[,] a, double b, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this float[][] a, double b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b);
            return result;
        }

        public static double[,] AddToDiagonal(this float[,] a, double[] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b[j]);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this float[][] a, double[] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this double[][] a, int[,] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (int)((int)a[i][j] + (int)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this double[,] a, int[][] b, int[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this double[,] a, int[,] b, int[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (int* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this double[][] a, int[,] b, int[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)(a[i][j]) + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this double[,] a, int[][] b, int[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this double[][] a, int[][] b, int[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (int)((int)(a[i][j]) + (int)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this double[,] a, int[,] b, int[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (int* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this double[,] a, int b, int[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this double[][] a, int b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this double[][] a, int b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this double a, int[,] b, int[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)a +  (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this double a, int[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (int)((int)a + (int)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this double a, int[][] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (int)((int)a + (int)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this double a, int[,] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this double[,] a, int b, int[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this double[,] a, int b, int[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this double[][] a, int b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this double[] a, int[] b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[] Add(this double[] a, int b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this double a, int[] b, int[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (int)((int)a + (int)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[,] Add(this double[,] a,  int[] b, int dimension, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[][] Add(this double[][] a,  int[] b, int dimension, int[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static int[,] AddToDiagonal(this double a, int[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this double a, int[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this double[] a, int[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a[j] + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this double[] a, int[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i] + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this double[,] a, int b, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this double[][] a, int b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b);
            return result;
        }

        public static int[,] AddToDiagonal(this double[,] a, int[] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b[j]);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this double[][] a, int[] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this double[][] a, int[,] b, short[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (short)((short)a[i][j] + (short)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this double[,] a, int[][] b, short[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this double[,] a, int[,] b, short[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (int* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this double[][] a, int[,] b, short[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)(a[i][j]) + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this double[,] a, int[][] b, short[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this double[][] a, int[][] b, short[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (short)((short)(a[i][j]) + (short)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this double[,] a, int[,] b, short[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (int* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this double[,] a, int b, short[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this double[][] a, int b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this double[][] a, int b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this double a, int[,] b, short[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)a +  (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this double a, int[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (short)((short)a + (short)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this double a, int[][] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (short)((short)a + (short)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this double a, int[,] b, short[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this double[,] a, int b, short[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this double[,] a, int b, short[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this double[][] a, int b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this double[] a, int[] b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[] Add(this double[] a, int b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this double a, int[] b, short[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (short)((short)a + (short)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[,] Add(this double[,] a,  int[] b, int dimension, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[][] Add(this double[][] a,  int[] b, int dimension, short[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static short[,] AddToDiagonal(this double a, int[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this double a, int[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this double[] a, int[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a[j] + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this double[] a, int[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i] + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this double[,] a, int b, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this double[][] a, int b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b);
            return result;
        }

        public static short[,] AddToDiagonal(this double[,] a, int[] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b[j]);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this double[][] a, int[] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this double[][] a, int[,] b, float[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (float)((float)a[i][j] + (float)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this double[,] a, int[][] b, float[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this double[,] a, int[,] b, float[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (int* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this double[][] a, int[,] b, float[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)(a[i][j]) + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this double[,] a, int[][] b, float[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this double[][] a, int[][] b, float[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (float)((float)(a[i][j]) + (float)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this double[,] a, int[,] b, float[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (int* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this double[,] a, int b, float[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this double[][] a, int b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this double[][] a, int b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this double a, int[,] b, float[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)a +  (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this double a, int[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (float)((float)a + (float)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this double a, int[][] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (float)((float)a + (float)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this double a, int[,] b, float[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this double[,] a, int b, float[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this double[,] a, int b, float[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this double[][] a, int b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this double[] a, int[] b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[] Add(this double[] a, int b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this double a, int[] b, float[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (float)((float)a + (float)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[,] Add(this double[,] a,  int[] b, int dimension, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[][] Add(this double[][] a,  int[] b, int dimension, float[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static float[,] AddToDiagonal(this double a, int[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this double a, int[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this double[] a, int[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a[j] + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this double[] a, int[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i] + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this double[,] a, int b, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this double[][] a, int b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b);
            return result;
        }

        public static float[,] AddToDiagonal(this double[,] a, int[] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b[j]);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this double[][] a, int[] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this double[][] a, int[,] b, double[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (double)((double)a[i][j] + (double)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this double[,] a, int[][] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this double[,] a, int[,] b, double[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (int* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this double[][] a, int[,] b, double[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)(a[i][j]) + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this double[,] a, int[][] b, double[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this double[][] a, int[][] b, double[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (double)((double)(a[i][j]) + (double)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this double[,] a, int[,] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (int* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this double[,] a, int b, double[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this double[][] a, int b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this double[][] a, int b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this double a, int[,] b, double[][] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)a +  (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this double a, int[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (double)((double)a + (double)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this double a, int[][] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (double)((double)a + (double)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this double a, int[,] b, double[,] result)
        {
            unsafe
            {
                fixed (int* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this double[,] a, int b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this double[,] a, int b, double[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this double[][] a, int b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this double[] a, int[] b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[] Add(this double[] a, int b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this double a, int[] b, double[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (double)((double)a + (double)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[,] Add(this double[,] a,  int[] b, int dimension, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[][] Add(this double[][] a,  int[] b, int dimension, double[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static double[,] AddToDiagonal(this double a, int[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this double a, int[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this double[] a, int[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (int* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a[j] + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this double[] a, int[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i] + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this double[,] a, int b, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this double[][] a, int b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b);
            return result;
        }

        public static double[,] AddToDiagonal(this double[,] a, int[] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b[j]);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this double[][] a, int[] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this double[][] a, short[,] b, int[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (int)((int)a[i][j] + (int)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this double[,] a, short[][] b, int[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this double[,] a, short[,] b, int[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (short* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this double[][] a, short[,] b, int[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)(a[i][j]) + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this double[,] a, short[][] b, int[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this double[][] a, short[][] b, int[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (int)((int)(a[i][j]) + (int)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this double[,] a, short[,] b, int[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (short* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this double[,] a, short b, int[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this double[][] a, short b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this double[][] a, short b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this double a, short[,] b, int[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)a +  (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this double a, short[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (int)((int)a + (int)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this double a, short[][] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (int)((int)a + (int)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this double a, short[,] b, int[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this double[,] a, short b, int[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this double[,] a, short b, int[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this double[][] a, short b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this double[] a, short[] b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[] Add(this double[] a, short b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this double a, short[] b, int[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (int)((int)a + (int)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[,] Add(this double[,] a,  short[] b, int dimension, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[][] Add(this double[][] a,  short[] b, int dimension, int[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static int[,] AddToDiagonal(this double a, short[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this double a, short[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this double[] a, short[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a[j] + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this double[] a, short[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i] + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this double[,] a, short b, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this double[][] a, short b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b);
            return result;
        }

        public static int[,] AddToDiagonal(this double[,] a, short[] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b[j]);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this double[][] a, short[] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this double[][] a, short[,] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (short)((short)a[i][j] + (short)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this double[,] a, short[][] b, short[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this double[,] a, short[,] b, short[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (short* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this double[][] a, short[,] b, short[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)(a[i][j]) + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this double[,] a, short[][] b, short[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this double[][] a, short[][] b, short[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (short)((short)(a[i][j]) + (short)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this double[,] a, short[,] b, short[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (short* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this double[,] a, short b, short[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this double[][] a, short b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this double[][] a, short b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this double a, short[,] b, short[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)a +  (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this double a, short[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (short)((short)a + (short)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this double a, short[][] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (short)((short)a + (short)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this double a, short[,] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this double[,] a, short b, short[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this double[,] a, short b, short[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this double[][] a, short b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this double[] a, short[] b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[] Add(this double[] a, short b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this double a, short[] b, short[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (short)((short)a + (short)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[,] Add(this double[,] a,  short[] b, int dimension, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[][] Add(this double[][] a,  short[] b, int dimension, short[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static short[,] AddToDiagonal(this double a, short[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this double a, short[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this double[] a, short[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a[j] + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this double[] a, short[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i] + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this double[,] a, short b, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this double[][] a, short b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b);
            return result;
        }

        public static short[,] AddToDiagonal(this double[,] a, short[] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b[j]);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this double[][] a, short[] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this double[][] a, short[,] b, float[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (float)((float)a[i][j] + (float)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this double[,] a, short[][] b, float[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this double[,] a, short[,] b, float[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (short* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this double[][] a, short[,] b, float[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)(a[i][j]) + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this double[,] a, short[][] b, float[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this double[][] a, short[][] b, float[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (float)((float)(a[i][j]) + (float)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this double[,] a, short[,] b, float[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (short* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this double[,] a, short b, float[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this double[][] a, short b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this double[][] a, short b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this double a, short[,] b, float[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)a +  (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this double a, short[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (float)((float)a + (float)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this double a, short[][] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (float)((float)a + (float)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this double a, short[,] b, float[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this double[,] a, short b, float[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this double[,] a, short b, float[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this double[][] a, short b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this double[] a, short[] b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[] Add(this double[] a, short b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this double a, short[] b, float[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (float)((float)a + (float)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[,] Add(this double[,] a,  short[] b, int dimension, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[][] Add(this double[][] a,  short[] b, int dimension, float[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static float[,] AddToDiagonal(this double a, short[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this double a, short[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this double[] a, short[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a[j] + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this double[] a, short[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i] + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this double[,] a, short b, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this double[][] a, short b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b);
            return result;
        }

        public static float[,] AddToDiagonal(this double[,] a, short[] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b[j]);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this double[][] a, short[] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this double[][] a, short[,] b, double[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (double)((double)a[i][j] + (double)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this double[,] a, short[][] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this double[,] a, short[,] b, double[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (short* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this double[][] a, short[,] b, double[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)(a[i][j]) + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this double[,] a, short[][] b, double[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this double[][] a, short[][] b, double[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (double)((double)(a[i][j]) + (double)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this double[,] a, short[,] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (short* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this double[,] a, short b, double[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this double[][] a, short b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this double[][] a, short b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this double a, short[,] b, double[][] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)a +  (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this double a, short[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (double)((double)a + (double)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this double a, short[][] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (double)((double)a + (double)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this double a, short[,] b, double[,] result)
        {
            unsafe
            {
                fixed (short* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this double[,] a, short b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this double[,] a, short b, double[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this double[][] a, short b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this double[] a, short[] b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[] Add(this double[] a, short b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this double a, short[] b, double[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (double)((double)a + (double)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[,] Add(this double[,] a,  short[] b, int dimension, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[][] Add(this double[][] a,  short[] b, int dimension, double[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static double[,] AddToDiagonal(this double a, short[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this double a, short[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this double[] a, short[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (short* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a[j] + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this double[] a, short[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i] + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this double[,] a, short b, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this double[][] a, short b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b);
            return result;
        }

        public static double[,] AddToDiagonal(this double[,] a, short[] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b[j]);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this double[][] a, short[] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this double[][] a, float[,] b, int[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (int)((int)a[i][j] + (int)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this double[,] a, float[][] b, int[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this double[,] a, float[,] b, int[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (float* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this double[][] a, float[,] b, int[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)(a[i][j]) + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this double[,] a, float[][] b, int[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this double[][] a, float[][] b, int[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (int)((int)(a[i][j]) + (int)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this double[,] a, float[,] b, int[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (float* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this double[,] a, float b, int[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this double[][] a, float b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this double[][] a, float b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this double a, float[,] b, int[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)a +  (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this double a, float[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (int)((int)a + (int)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this double a, float[][] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (int)((int)a + (int)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this double a, float[,] b, int[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this double[,] a, float b, int[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this double[,] a, float b, int[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this double[][] a, float b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this double[] a, float[] b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[] Add(this double[] a, float b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this double a, float[] b, int[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (int)((int)a + (int)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[,] Add(this double[,] a,  float[] b, int dimension, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[][] Add(this double[][] a,  float[] b, int dimension, int[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static int[,] AddToDiagonal(this double a, float[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this double a, float[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this double[] a, float[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a[j] + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this double[] a, float[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i] + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this double[,] a, float b, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this double[][] a, float b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b);
            return result;
        }

        public static int[,] AddToDiagonal(this double[,] a, float[] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b[j]);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this double[][] a, float[] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this double[][] a, float[,] b, short[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (short)((short)a[i][j] + (short)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this double[,] a, float[][] b, short[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this double[,] a, float[,] b, short[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (float* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this double[][] a, float[,] b, short[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)(a[i][j]) + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this double[,] a, float[][] b, short[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this double[][] a, float[][] b, short[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (short)((short)(a[i][j]) + (short)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this double[,] a, float[,] b, short[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (float* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this double[,] a, float b, short[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this double[][] a, float b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this double[][] a, float b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this double a, float[,] b, short[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)a +  (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this double a, float[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (short)((short)a + (short)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this double a, float[][] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (short)((short)a + (short)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this double a, float[,] b, short[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this double[,] a, float b, short[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this double[,] a, float b, short[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this double[][] a, float b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this double[] a, float[] b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[] Add(this double[] a, float b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this double a, float[] b, short[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (short)((short)a + (short)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[,] Add(this double[,] a,  float[] b, int dimension, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[][] Add(this double[][] a,  float[] b, int dimension, short[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static short[,] AddToDiagonal(this double a, float[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this double a, float[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this double[] a, float[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a[j] + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this double[] a, float[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i] + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this double[,] a, float b, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this double[][] a, float b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b);
            return result;
        }

        public static short[,] AddToDiagonal(this double[,] a, float[] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b[j]);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this double[][] a, float[] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this double[][] a, float[,] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (float)((float)a[i][j] + (float)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this double[,] a, float[][] b, float[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this double[,] a, float[,] b, float[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (float* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this double[][] a, float[,] b, float[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)(a[i][j]) + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this double[,] a, float[][] b, float[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this double[][] a, float[][] b, float[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (float)((float)(a[i][j]) + (float)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this double[,] a, float[,] b, float[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (float* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this double[,] a, float b, float[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this double[][] a, float b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this double[][] a, float b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this double a, float[,] b, float[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)a +  (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this double a, float[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (float)((float)a + (float)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this double a, float[][] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (float)((float)a + (float)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this double a, float[,] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this double[,] a, float b, float[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this double[,] a, float b, float[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this double[][] a, float b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this double[] a, float[] b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[] Add(this double[] a, float b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this double a, float[] b, float[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (float)((float)a + (float)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[,] Add(this double[,] a,  float[] b, int dimension, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[][] Add(this double[][] a,  float[] b, int dimension, float[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static float[,] AddToDiagonal(this double a, float[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this double a, float[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this double[] a, float[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a[j] + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this double[] a, float[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i] + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this double[,] a, float b, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this double[][] a, float b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b);
            return result;
        }

        public static float[,] AddToDiagonal(this double[,] a, float[] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b[j]);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this double[][] a, float[] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this double[][] a, float[,] b, double[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (double)((double)a[i][j] + (double)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this double[,] a, float[][] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this double[,] a, float[,] b, double[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (float* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this double[][] a, float[,] b, double[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)(a[i][j]) + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this double[,] a, float[][] b, double[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this double[][] a, float[][] b, double[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (double)((double)(a[i][j]) + (double)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this double[,] a, float[,] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (float* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this double[,] a, float b, double[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this double[][] a, float b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this double[][] a, float b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this double a, float[,] b, double[][] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)a +  (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this double a, float[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (double)((double)a + (double)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this double a, float[][] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (double)((double)a + (double)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this double a, float[,] b, double[,] result)
        {
            unsafe
            {
                fixed (float* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this double[,] a, float b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this double[,] a, float b, double[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this double[][] a, float b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this double[] a, float[] b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[] Add(this double[] a, float b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this double a, float[] b, double[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (double)((double)a + (double)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[,] Add(this double[,] a,  float[] b, int dimension, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[][] Add(this double[][] a,  float[] b, int dimension, double[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static double[,] AddToDiagonal(this double a, float[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this double a, float[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this double[] a, float[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (float* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a[j] + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this double[] a, float[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i] + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this double[,] a, float b, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this double[][] a, float b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b);
            return result;
        }

        public static double[,] AddToDiagonal(this double[,] a, float[] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b[j]);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this double[][] a, float[] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this double[][] a, double[,] b, int[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (int)((int)a[i][j] + (int)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this double[,] a, double[][] b, int[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this double[,] a, double[,] b, int[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (double* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this double[][] a, double[,] b, int[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)(a[i][j]) + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this double[,] a, double[][] b, int[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (int)((int)(*pa) + (int)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this double[][] a, double[][] b, int[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (int)((int)(a[i][j]) + (int)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this double[,] a, double[,] b, int[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (double* ptrB = b)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (int)((int)(*pa) + (int)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this double[,] a, double b, int[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this double[][] a, double b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this double[][] a, double b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this double a, double[,] b, int[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (int)((int)a +  (int)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[][] Add(this double a, double[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (int)((int)a + (int)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this double a, double[][] b, int[,] result)
        {
            unsafe
            {
                fixed (int* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (int)((int)a + (int)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this double a, double[,] b, int[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[,] Add(this double[,] a, double b, int[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (int* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[][] Add(this double[,] a, double b, int[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (int)((int)(*pa) +  (int)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[,] Add(this double[][] a, double b, int[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (int)((int)a[i][j] + (int)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this double[] a, double[] b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static int[] Add(this double[] a, double b, int[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)((int)a[i] + (int)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static int[] Add(this double a, double[] b, int[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (int)((int)a + (int)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[,] Add(this double[,] a,  double[] b, int dimension, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (int)((int)a[i, j] + (int)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static int[][] Add(this double[][] a,  double[] b, int dimension, int[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (int)((int)a[i][j] + (int)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static int[,] AddToDiagonal(this double a, double[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this double a, double[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this double[] a, double[,] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (int)((int)a[j] + (int)(*pb));
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this double[] a, double[][] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i] + (int)b[i][i]);
            return result;
        }

        public static int[,] AddToDiagonal(this double[,] a, double b, int[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this double[][] a, double b, int[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b);
            return result;
        }

        public static int[,] AddToDiagonal(this double[,] a, double[] b, int[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (int* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (int)((int)(*pa) + (int)b[j]);
                }
            }
            return result;
        }

        public static int[][] AddToDiagonal(this double[][] a, double[] b, int[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (int)((int)a[i][i] + (int)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this double[][] a, double[,] b, short[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (short)((short)a[i][j] + (short)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this double[,] a, double[][] b, short[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this double[,] a, double[,] b, short[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (double* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this double[][] a, double[,] b, short[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)(a[i][j]) + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this double[,] a, double[][] b, short[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (short)((short)(*pa) + (short)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this double[][] a, double[][] b, short[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (short)((short)(a[i][j]) + (short)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this double[,] a, double[,] b, short[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (double* ptrB = b)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (short)((short)(*pa) + (short)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this double[,] a, double b, short[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this double[][] a, double b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this double[][] a, double b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this double a, double[,] b, short[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (short)((short)a +  (short)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[][] Add(this double a, double[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (short)((short)a + (short)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this double a, double[][] b, short[,] result)
        {
            unsafe
            {
                fixed (short* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (short)((short)a + (short)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this double a, double[,] b, short[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[,] Add(this double[,] a, double b, short[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (short* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[][] Add(this double[,] a, double b, short[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (short)((short)(*pa) +  (short)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[,] Add(this double[][] a, double b, short[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (short)((short)a[i][j] + (short)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this double[] a, double[] b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static short[] Add(this double[] a, double b, short[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)((short)a[i] + (short)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static short[] Add(this double a, double[] b, short[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (short)((short)a + (short)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[,] Add(this double[,] a,  double[] b, int dimension, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (short)((short)a[i, j] + (short)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static short[][] Add(this double[][] a,  double[] b, int dimension, short[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (short)((short)a[i][j] + (short)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static short[,] AddToDiagonal(this double a, double[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this double a, double[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this double[] a, double[,] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (short)((short)a[j] + (short)(*pb));
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this double[] a, double[][] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i] + (short)b[i][i]);
            return result;
        }

        public static short[,] AddToDiagonal(this double[,] a, double b, short[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this double[][] a, double b, short[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b);
            return result;
        }

        public static short[,] AddToDiagonal(this double[,] a, double[] b, short[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (short* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (short)((short)(*pa) + (short)b[j]);
                }
            }
            return result;
        }

        public static short[][] AddToDiagonal(this double[][] a, double[] b, short[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (short)((short)a[i][i] + (short)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this double[][] a, double[,] b, float[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (float)((float)a[i][j] + (float)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this double[,] a, double[][] b, float[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this double[,] a, double[,] b, float[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (double* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this double[][] a, double[,] b, float[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)(a[i][j]) + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this double[,] a, double[][] b, float[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (float)((float)(*pa) + (float)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this double[][] a, double[][] b, float[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (float)((float)(a[i][j]) + (float)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this double[,] a, double[,] b, float[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (double* ptrB = b)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (float)((float)(*pa) + (float)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this double[,] a, double b, float[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this double[][] a, double b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this double[][] a, double b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this double a, double[,] b, float[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (float)((float)a +  (float)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[][] Add(this double a, double[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (float)((float)a + (float)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this double a, double[][] b, float[,] result)
        {
            unsafe
            {
                fixed (float* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (float)((float)a + (float)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this double a, double[,] b, float[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[,] Add(this double[,] a, double b, float[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (float* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[][] Add(this double[,] a, double b, float[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (float)((float)(*pa) +  (float)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[,] Add(this double[][] a, double b, float[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (float)((float)a[i][j] + (float)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this double[] a, double[] b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static float[] Add(this double[] a, double b, float[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)((float)a[i] + (float)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static float[] Add(this double a, double[] b, float[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (float)((float)a + (float)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[,] Add(this double[,] a,  double[] b, int dimension, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (float)((float)a[i, j] + (float)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static float[][] Add(this double[][] a,  double[] b, int dimension, float[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (float)((float)a[i][j] + (float)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static float[,] AddToDiagonal(this double a, double[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this double a, double[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this double[] a, double[,] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (float)((float)a[j] + (float)(*pb));
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this double[] a, double[][] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i] + (float)b[i][i]);
            return result;
        }

        public static float[,] AddToDiagonal(this double[,] a, double b, float[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this double[][] a, double b, float[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b);
            return result;
        }

        public static float[,] AddToDiagonal(this double[,] a, double[] b, float[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (float* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (float)((float)(*pa) + (float)b[j]);
                }
            }
            return result;
        }

        public static float[][] AddToDiagonal(this double[][] a, double[] b, float[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (float)((float)a[i][i] + (float)b[i]);
            return result;
        }
 
#endregion
     

#region Matrix matrix
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this double[][] a, double[,] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++)
                        for (int j = 0; j < a[i].Length; j++, pb++, pr++)
                            *pr = (double)((double)a[i][j] + (double)(*pb));
                }
            }

            return result;
        }

/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this double[,] a, double[][] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pa++, pr++)
                            *pr = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this double[,] a, double[,] b, double[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (double* ptrB = b)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++, pb++)
                            result[i][j] = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this double[][] a, double[,] b, double[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)(a[i][j]) + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this double[,] a, double[][] b, double[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                            result[i][j] = (double)((double)(*pa) + (double)(b[i][j]));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this double[][] a, double[][] b, double[][] result)
        {
            for (int i = 0; i < result.Length; i++)
                for (int j = 0; j < result[i].Length; j++)
                    result[i][j] = (double)((double)(a[i][j]) + (double)(b[i][j]));

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this double[,] a, double[,] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (double* ptrB = b)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pb = ptrB;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pb++, pr++)
                        *pr = (double)((double)(*pa) + (double)(*pb));
                }
            }

            return result;
        }
#endregion


























#region Matrix with scalar
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this double[,] a, double b, double[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this double[][] a, double b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i][j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this double[][] a, double b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this double a, double[,] b, double[][] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)
                {
                    var pb = ptrB;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pb++)
                            result[i][j] = (double)((double)a +  (double)(*pb));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>B</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[][] Add(this double a, double[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                for (int j = 0; j < b[i].Length; j++)
                    result[i][j] = (double)((double)a + (double)b[i][j]);
            return result;
        }
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this double a, double[][] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrR = result)
                {
                    var pr = ptrR;
                    for (int i = 0; i < b.Length; i++)
                        for (int j = 0; j < b[i].Length; j++, pr++)
                            *pr = (double)((double)a + (double)(b[i][j]));
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a matrix <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The matrix <c>B</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this double a, double[,] b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < b.Length; j++, pr++, pb++)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[,] Add(this double[,] a, double b, double[,] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                fixed (double* ptrR = result)
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int i = 0; i < a.Length; i++, pa++, pr++)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[][] Add(this double[,] a, double b, double[][] result)
        {
            unsafe
            {
                fixed (double* ptrA = a)
                {
                    var pa = ptrA;
                    for (int i = 0; i < result.Length; i++)
                        for (int j = 0; j < result[i].Length; j++, pa++)
                        result[i][j] = (double)((double)(*pa) +  (double)b);
                }
            }

            return result;
        }
*/
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a scalar <c>b</c>.
        /// </summary>
        /// 
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[,] Add(this double[][] a, double b, double[,] result)
        {
            for (int i = 0; i < a.Length; i++)
                for (int j = 0; j < a[i].Length; j++)
                    result[i, j] = (double)((double)a[i][j] + (double)b);
            return result;
        }
*/
#endregion
























#region vector vector
/*
        /// <summary>
        ///   Adds a vector <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this double[] a, double[] b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b[i]);
            return result;
        }
#endregion






#region Vector with scalar

        /// <summary>
        ///   Adds a vector <c>a</c> to a scalar <c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The vector <c>a</c>.</param>
        /// <param name="b">The scalar <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
        public static double[] Add(this double[] a, double b, double[] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)((double)a[i] + (double)b);
            return result;
        }

/*
        /// <summary>
        ///   Adds a scalar <c>a</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The scalar <c>a</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="result">The vector where the result should be stored. Pass the same
        ///   vector as one of the arguments to perform the operation in place.</param>
        /// 
*/
        public static double[] Add(this double a, double[] b, double[] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i] = (double)((double)a + (double)b[i]);
            return result;
        }
#endregion







#region Matrix vector
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[,] Add(this double[,] a,  double[] b, int dimension, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            if (dimension == 0)
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < rows; i++)
                    for (int j = 0; j < cols; j++)
                        result[i, j] = (double)((double)a[i, j] + (double)b[i]);
            }

            return result;
        }
/*
        /// <summary>
        ///   Adds a matrix <c>A</c> to a vector<c>b</c>.
        /// </summary>
        ///
        /// <param name="a">The matrix <c>A</c>.</param>
        /// <param name="b">The vector <c>b</c>.</param>
        /// <param name="dimension">
        ///   The dimension along which the means will be calculated. Pass
        ///   0 to compute a row vector containing the mean of each column,
        ///   or 1 to compute a column vector containing the mean of each row.
        ///   Default value is 0.
        /// </param>
        /// 
*/
        public static double[][] Add(this double[][] a,  double[] b, int dimension, double[][] result)
        {
            if (dimension == 0)
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[j]);
            }
            else
            {
                for (int i = 0; i < a.Length; i++)
                    for (int j = 0; j < a[i].Length; j++)
                        result[i][j] = (double)((double)a[i][j] + (double)b[i]);
            }

            return result;
        }
#endregion























#region Diagonal

        public static double[,] AddToDiagonal(this double a, double[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this double a, double[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this double[] a, double[,] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrB = b)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pb = ptrB;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pb += cols + 1)
                        *pr = (double)((double)a[j] + (double)(*pb));
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this double[] a, double[][] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i] + (double)b[i][i]);
            return result;
        }

        public static double[,] AddToDiagonal(this double[,] a, double b, double[,] result)
        {
            int rows = a.GetLength(0);
            int cols = a.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pa = ptrA;
                    var pr = ptrR;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this double[][] a, double b, double[][] result)
        {
            for (int i = 0; i < a.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b);
            return result;
        }

        public static double[,] AddToDiagonal(this double[,] a, double[] b, double[,] result)
        {
            int rows = b.GetLength(0);
            int cols = b.GetLength(1);

            unsafe 
            {
                fixed (double* ptrA = a)        
                fixed (double* ptrR = result)        
                {
                    var pr = ptrR;
                    var pa = ptrA;
                    for (int j = 0; j < rows; j++, pr += cols + 1, pa += cols + 1)
                        *pr = (double)((double)(*pa) + (double)b[j]);
                }
            }
            return result;
        }

        public static double[][] AddToDiagonal(this double[][] a, double[] b, double[][] result)
        {
            for (int i = 0; i < b.Length; i++)
                result[i][i] = (double)((double)a[i][i] + (double)b[i]);
            return result;
        }
 
#endregion
     
#pragma warning restore 1591
    }
}
