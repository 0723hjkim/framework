// Accord Math Library
// The Accord.NET Framework
// http://accord-framework.net
//
// Copyright © César Souza, 2009-2015
// cesarsouza at gmail.com
//
//    This library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    This library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with this library; if not, write to the Free Software
//    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
//

// ======================================================================
// This code has been generated by a tool; do not edit manually. Instead,
// edit the T4 template Vector.Scale.tt so this file can be regenerated. 
// ======================================================================

namespace Accord.Math
{
    using System;
    using Accord.Math;

    public static partial class Vector
    {
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static int Scale(this int value, int fromMin, int fromMax, int toMin, int toMax , bool inPlace = false)
        {
            return (int)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static int[] Scale(this int[] values, int fromMin, int fromMax, int toMin, int toMax , bool inPlace = false)
        {
            int[] results =  inPlace ? values :  new int[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (int)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static int[] Scale(this int[] values, int toMin, int toMax , bool inPlace = false)
        {
            int fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax, inPlace);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static float Scale(this int value, int fromMin, int fromMax, float toMin, float toMax )
        {
            return (float)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static float[] Scale(this int[] values, int fromMin, int fromMax, float toMin, float toMax )
        {
            float[] results =  new float[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (float)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static float[] Scale(this int[] values, float toMin, float toMax )
        {
            int fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static double Scale(this int value, int fromMin, int fromMax, double toMin, double toMax )
        {
            return (double)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static double[] Scale(this int[] values, int fromMin, int fromMax, double toMin, double toMax )
        {
            double[] results =  new double[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (double)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static double[] Scale(this int[] values, double toMin, double toMax )
        {
            int fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static short Scale(this int value, int fromMin, int fromMax, short toMin, short toMax )
        {
            return (short)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static short[] Scale(this int[] values, int fromMin, int fromMax, short toMin, short toMax )
        {
            short[] results =  new short[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (short)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static short[] Scale(this int[] values, short toMin, short toMax )
        {
            int fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static byte Scale(this int value, int fromMin, int fromMax, byte toMin, byte toMax )
        {
            return (byte)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static byte[] Scale(this int[] values, int fromMin, int fromMax, byte toMin, byte toMax )
        {
            byte[] results =  new byte[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (byte)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static byte[] Scale(this int[] values, byte toMin, byte toMax )
        {
            int fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static sbyte Scale(this int value, int fromMin, int fromMax, sbyte toMin, sbyte toMax )
        {
            return (sbyte)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static sbyte[] Scale(this int[] values, int fromMin, int fromMax, sbyte toMin, sbyte toMax )
        {
            sbyte[] results =  new sbyte[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (sbyte)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static sbyte[] Scale(this int[] values, sbyte toMin, sbyte toMax )
        {
            int fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static long Scale(this int value, int fromMin, int fromMax, long toMin, long toMax )
        {
            return (long)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static long[] Scale(this int[] values, int fromMin, int fromMax, long toMin, long toMax )
        {
            long[] results =  new long[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (long)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static long[] Scale(this int[] values, long toMin, long toMax )
        {
            int fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static int Scale(this float value, float fromMin, float fromMax, int toMin, int toMax )
        {
            return (int)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static int[] Scale(this float[] values, float fromMin, float fromMax, int toMin, int toMax )
        {
            int[] results =  new int[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (int)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static int[] Scale(this float[] values, int toMin, int toMax )
        {
            float fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static float Scale(this float value, float fromMin, float fromMax, float toMin, float toMax , bool inPlace = false)
        {
            return (float)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static float[] Scale(this float[] values, float fromMin, float fromMax, float toMin, float toMax , bool inPlace = false)
        {
            float[] results =  inPlace ? values :  new float[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (float)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static float[] Scale(this float[] values, float toMin, float toMax , bool inPlace = false)
        {
            float fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax, inPlace);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static double Scale(this float value, float fromMin, float fromMax, double toMin, double toMax )
        {
            return (double)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static double[] Scale(this float[] values, float fromMin, float fromMax, double toMin, double toMax )
        {
            double[] results =  new double[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (double)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static double[] Scale(this float[] values, double toMin, double toMax )
        {
            float fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static short Scale(this float value, float fromMin, float fromMax, short toMin, short toMax )
        {
            return (short)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static short[] Scale(this float[] values, float fromMin, float fromMax, short toMin, short toMax )
        {
            short[] results =  new short[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (short)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static short[] Scale(this float[] values, short toMin, short toMax )
        {
            float fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static byte Scale(this float value, float fromMin, float fromMax, byte toMin, byte toMax )
        {
            return (byte)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static byte[] Scale(this float[] values, float fromMin, float fromMax, byte toMin, byte toMax )
        {
            byte[] results =  new byte[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (byte)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static byte[] Scale(this float[] values, byte toMin, byte toMax )
        {
            float fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static sbyte Scale(this float value, float fromMin, float fromMax, sbyte toMin, sbyte toMax )
        {
            return (sbyte)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static sbyte[] Scale(this float[] values, float fromMin, float fromMax, sbyte toMin, sbyte toMax )
        {
            sbyte[] results =  new sbyte[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (sbyte)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static sbyte[] Scale(this float[] values, sbyte toMin, sbyte toMax )
        {
            float fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static long Scale(this float value, float fromMin, float fromMax, long toMin, long toMax )
        {
            return (long)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static long[] Scale(this float[] values, float fromMin, float fromMax, long toMin, long toMax )
        {
            long[] results =  new long[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (long)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static long[] Scale(this float[] values, long toMin, long toMax )
        {
            float fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static int Scale(this double value, double fromMin, double fromMax, int toMin, int toMax )
        {
            return (int)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static int[] Scale(this double[] values, double fromMin, double fromMax, int toMin, int toMax )
        {
            int[] results =  new int[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (int)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static int[] Scale(this double[] values, int toMin, int toMax )
        {
            double fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static float Scale(this double value, double fromMin, double fromMax, float toMin, float toMax )
        {
            return (float)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static float[] Scale(this double[] values, double fromMin, double fromMax, float toMin, float toMax )
        {
            float[] results =  new float[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (float)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static float[] Scale(this double[] values, float toMin, float toMax )
        {
            double fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static double Scale(this double value, double fromMin, double fromMax, double toMin, double toMax , bool inPlace = false)
        {
            return (double)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static double[] Scale(this double[] values, double fromMin, double fromMax, double toMin, double toMax , bool inPlace = false)
        {
            double[] results =  inPlace ? values :  new double[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (double)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static double[] Scale(this double[] values, double toMin, double toMax , bool inPlace = false)
        {
            double fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax, inPlace);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static short Scale(this double value, double fromMin, double fromMax, short toMin, short toMax )
        {
            return (short)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static short[] Scale(this double[] values, double fromMin, double fromMax, short toMin, short toMax )
        {
            short[] results =  new short[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (short)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static short[] Scale(this double[] values, short toMin, short toMax )
        {
            double fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static byte Scale(this double value, double fromMin, double fromMax, byte toMin, byte toMax )
        {
            return (byte)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static byte[] Scale(this double[] values, double fromMin, double fromMax, byte toMin, byte toMax )
        {
            byte[] results =  new byte[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (byte)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static byte[] Scale(this double[] values, byte toMin, byte toMax )
        {
            double fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static sbyte Scale(this double value, double fromMin, double fromMax, sbyte toMin, sbyte toMax )
        {
            return (sbyte)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static sbyte[] Scale(this double[] values, double fromMin, double fromMax, sbyte toMin, sbyte toMax )
        {
            sbyte[] results =  new sbyte[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (sbyte)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static sbyte[] Scale(this double[] values, sbyte toMin, sbyte toMax )
        {
            double fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static long Scale(this double value, double fromMin, double fromMax, long toMin, long toMax )
        {
            return (long)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static long[] Scale(this double[] values, double fromMin, double fromMax, long toMin, long toMax )
        {
            long[] results =  new long[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (long)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static long[] Scale(this double[] values, long toMin, long toMax )
        {
            double fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static int Scale(this short value, short fromMin, short fromMax, int toMin, int toMax )
        {
            return (int)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static int[] Scale(this short[] values, short fromMin, short fromMax, int toMin, int toMax )
        {
            int[] results =  new int[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (int)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static int[] Scale(this short[] values, int toMin, int toMax )
        {
            short fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static float Scale(this short value, short fromMin, short fromMax, float toMin, float toMax )
        {
            return (float)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static float[] Scale(this short[] values, short fromMin, short fromMax, float toMin, float toMax )
        {
            float[] results =  new float[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (float)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static float[] Scale(this short[] values, float toMin, float toMax )
        {
            short fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static double Scale(this short value, short fromMin, short fromMax, double toMin, double toMax )
        {
            return (double)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static double[] Scale(this short[] values, short fromMin, short fromMax, double toMin, double toMax )
        {
            double[] results =  new double[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (double)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static double[] Scale(this short[] values, double toMin, double toMax )
        {
            short fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static short Scale(this short value, short fromMin, short fromMax, short toMin, short toMax , bool inPlace = false)
        {
            return (short)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static short[] Scale(this short[] values, short fromMin, short fromMax, short toMin, short toMax , bool inPlace = false)
        {
            short[] results =  inPlace ? values :  new short[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (short)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static short[] Scale(this short[] values, short toMin, short toMax , bool inPlace = false)
        {
            short fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax, inPlace);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static byte Scale(this short value, short fromMin, short fromMax, byte toMin, byte toMax )
        {
            return (byte)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static byte[] Scale(this short[] values, short fromMin, short fromMax, byte toMin, byte toMax )
        {
            byte[] results =  new byte[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (byte)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static byte[] Scale(this short[] values, byte toMin, byte toMax )
        {
            short fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static sbyte Scale(this short value, short fromMin, short fromMax, sbyte toMin, sbyte toMax )
        {
            return (sbyte)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static sbyte[] Scale(this short[] values, short fromMin, short fromMax, sbyte toMin, sbyte toMax )
        {
            sbyte[] results =  new sbyte[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (sbyte)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static sbyte[] Scale(this short[] values, sbyte toMin, sbyte toMax )
        {
            short fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static long Scale(this short value, short fromMin, short fromMax, long toMin, long toMax )
        {
            return (long)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static long[] Scale(this short[] values, short fromMin, short fromMax, long toMin, long toMax )
        {
            long[] results =  new long[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (long)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static long[] Scale(this short[] values, long toMin, long toMax )
        {
            short fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static int Scale(this byte value, byte fromMin, byte fromMax, int toMin, int toMax )
        {
            return (int)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static int[] Scale(this byte[] values, byte fromMin, byte fromMax, int toMin, int toMax )
        {
            int[] results =  new int[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (int)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static int[] Scale(this byte[] values, int toMin, int toMax )
        {
            byte fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static float Scale(this byte value, byte fromMin, byte fromMax, float toMin, float toMax )
        {
            return (float)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static float[] Scale(this byte[] values, byte fromMin, byte fromMax, float toMin, float toMax )
        {
            float[] results =  new float[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (float)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static float[] Scale(this byte[] values, float toMin, float toMax )
        {
            byte fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static double Scale(this byte value, byte fromMin, byte fromMax, double toMin, double toMax )
        {
            return (double)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static double[] Scale(this byte[] values, byte fromMin, byte fromMax, double toMin, double toMax )
        {
            double[] results =  new double[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (double)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static double[] Scale(this byte[] values, double toMin, double toMax )
        {
            byte fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static short Scale(this byte value, byte fromMin, byte fromMax, short toMin, short toMax )
        {
            return (short)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static short[] Scale(this byte[] values, byte fromMin, byte fromMax, short toMin, short toMax )
        {
            short[] results =  new short[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (short)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static short[] Scale(this byte[] values, short toMin, short toMax )
        {
            byte fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static byte Scale(this byte value, byte fromMin, byte fromMax, byte toMin, byte toMax , bool inPlace = false)
        {
            return (byte)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static byte[] Scale(this byte[] values, byte fromMin, byte fromMax, byte toMin, byte toMax , bool inPlace = false)
        {
            byte[] results =  inPlace ? values :  new byte[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (byte)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static byte[] Scale(this byte[] values, byte toMin, byte toMax , bool inPlace = false)
        {
            byte fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax, inPlace);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static sbyte Scale(this byte value, byte fromMin, byte fromMax, sbyte toMin, sbyte toMax )
        {
            return (sbyte)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static sbyte[] Scale(this byte[] values, byte fromMin, byte fromMax, sbyte toMin, sbyte toMax )
        {
            sbyte[] results =  new sbyte[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (sbyte)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static sbyte[] Scale(this byte[] values, sbyte toMin, sbyte toMax )
        {
            byte fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static long Scale(this byte value, byte fromMin, byte fromMax, long toMin, long toMax )
        {
            return (long)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static long[] Scale(this byte[] values, byte fromMin, byte fromMax, long toMin, long toMax )
        {
            long[] results =  new long[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (long)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static long[] Scale(this byte[] values, long toMin, long toMax )
        {
            byte fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static int Scale(this sbyte value, sbyte fromMin, sbyte fromMax, int toMin, int toMax )
        {
            return (int)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static int[] Scale(this sbyte[] values, sbyte fromMin, sbyte fromMax, int toMin, int toMax )
        {
            int[] results =  new int[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (int)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static int[] Scale(this sbyte[] values, int toMin, int toMax )
        {
            sbyte fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static float Scale(this sbyte value, sbyte fromMin, sbyte fromMax, float toMin, float toMax )
        {
            return (float)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static float[] Scale(this sbyte[] values, sbyte fromMin, sbyte fromMax, float toMin, float toMax )
        {
            float[] results =  new float[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (float)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static float[] Scale(this sbyte[] values, float toMin, float toMax )
        {
            sbyte fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static double Scale(this sbyte value, sbyte fromMin, sbyte fromMax, double toMin, double toMax )
        {
            return (double)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static double[] Scale(this sbyte[] values, sbyte fromMin, sbyte fromMax, double toMin, double toMax )
        {
            double[] results =  new double[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (double)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static double[] Scale(this sbyte[] values, double toMin, double toMax )
        {
            sbyte fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static short Scale(this sbyte value, sbyte fromMin, sbyte fromMax, short toMin, short toMax )
        {
            return (short)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static short[] Scale(this sbyte[] values, sbyte fromMin, sbyte fromMax, short toMin, short toMax )
        {
            short[] results =  new short[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (short)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static short[] Scale(this sbyte[] values, short toMin, short toMax )
        {
            sbyte fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static byte Scale(this sbyte value, sbyte fromMin, sbyte fromMax, byte toMin, byte toMax )
        {
            return (byte)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static byte[] Scale(this sbyte[] values, sbyte fromMin, sbyte fromMax, byte toMin, byte toMax )
        {
            byte[] results =  new byte[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (byte)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static byte[] Scale(this sbyte[] values, byte toMin, byte toMax )
        {
            sbyte fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static sbyte Scale(this sbyte value, sbyte fromMin, sbyte fromMax, sbyte toMin, sbyte toMax , bool inPlace = false)
        {
            return (sbyte)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static sbyte[] Scale(this sbyte[] values, sbyte fromMin, sbyte fromMax, sbyte toMin, sbyte toMax , bool inPlace = false)
        {
            sbyte[] results =  inPlace ? values :  new sbyte[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (sbyte)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static sbyte[] Scale(this sbyte[] values, sbyte toMin, sbyte toMax , bool inPlace = false)
        {
            sbyte fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax, inPlace);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static long Scale(this sbyte value, sbyte fromMin, sbyte fromMax, long toMin, long toMax )
        {
            return (long)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static long[] Scale(this sbyte[] values, sbyte fromMin, sbyte fromMax, long toMin, long toMax )
        {
            long[] results =  new long[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (long)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static long[] Scale(this sbyte[] values, long toMin, long toMax )
        {
            sbyte fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static int Scale(this long value, long fromMin, long fromMax, int toMin, int toMax )
        {
            return (int)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static int[] Scale(this long[] values, long fromMin, long fromMax, int toMin, int toMax )
        {
            int[] results =  new int[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (int)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static int[] Scale(this long[] values, int toMin, int toMax )
        {
            long fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static float Scale(this long value, long fromMin, long fromMax, float toMin, float toMax )
        {
            return (float)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static float[] Scale(this long[] values, long fromMin, long fromMax, float toMin, float toMax )
        {
            float[] results =  new float[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (float)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static float[] Scale(this long[] values, float toMin, float toMax )
        {
            long fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static double Scale(this long value, long fromMin, long fromMax, double toMin, double toMax )
        {
            return (double)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static double[] Scale(this long[] values, long fromMin, long fromMax, double toMin, double toMax )
        {
            double[] results =  new double[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (double)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static double[] Scale(this long[] values, double toMin, double toMax )
        {
            long fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static short Scale(this long value, long fromMin, long fromMax, short toMin, short toMax )
        {
            return (short)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static short[] Scale(this long[] values, long fromMin, long fromMax, short toMin, short toMax )
        {
            short[] results =  new short[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (short)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static short[] Scale(this long[] values, short toMin, short toMax )
        {
            long fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static byte Scale(this long value, long fromMin, long fromMax, byte toMin, byte toMax )
        {
            return (byte)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static byte[] Scale(this long[] values, long fromMin, long fromMax, byte toMin, byte toMax )
        {
            byte[] results =  new byte[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (byte)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static byte[] Scale(this long[] values, byte toMin, byte toMax )
        {
            long fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static sbyte Scale(this long value, long fromMin, long fromMax, sbyte toMin, sbyte toMax )
        {
            return (sbyte)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static sbyte[] Scale(this long[] values, long fromMin, long fromMax, sbyte toMin, sbyte toMax )
        {
            sbyte[] results =  new sbyte[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (sbyte)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static sbyte[] Scale(this long[] values, sbyte toMin, sbyte toMax )
        {
            long fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax);
        }
        /// <summary>
        ///   Converts a value from one scale to another scale.
        /// </summary>
        /// 
        public static long Scale(this long value, long fromMin, long fromMax, long toMin, long toMax , bool inPlace = false)
        {
            return (long)((toMax - toMin) * (value - fromMin) / (fromMax - fromMin) + toMin);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static long[] Scale(this long[] values, long fromMin, long fromMax, long toMin, long toMax , bool inPlace = false)
        {
            long[] results =  inPlace ? values :  new long[values.Length];
            for (int i = 0; i < values.Length; i++)
                results[i] = (long)((toMax - toMin) * (values[i] - fromMin) / (fromMax - fromMin) + toMin);

            return results;
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static long[] Scale(this long[] values, long toMin, long toMax , bool inPlace = false)
        {
            long fromMin, fromMax;
            values.Range(out fromMin, out fromMax);
            return Scale(values, fromMin, fromMax, toMin, toMax, inPlace);
        }

        /// <summary>
        ///   Converts one value from one scale to another scale.
        /// </summary>
        /// 
        public static int Scale(this int value, IRange<int> fromRange, IRange<int> toRange, bool inPlace = false)
        {
            return Scale(value, fromRange.Min, fromRange.Max, toRange.Min, toRange.Max);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static int[] Scale(this int[] values, IRange<int> fromRange, IRange<int> toRange, bool inPlace = false)
        {
            return Scale(values, fromRange.Min, fromRange.Max, toRange.Min, toRange.Max);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static int[] Scale(this int[] values, IRange<int> toRange, bool inPlace = false)
        {
            return Scale(values, toRange.Min, toRange.Max);
        }

        /// <summary>
        ///   Converts one value from one scale to another scale.
        /// </summary>
        /// 
        public static float Scale(this int value, IRange<int> fromRange, IRange<float> toRange)
        {
            return Scale(value, fromRange.Min, fromRange.Max, toRange.Min, toRange.Max);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static float[] Scale(this int[] values, IRange<int> fromRange, IRange<float> toRange)
        {
            return Scale(values, fromRange.Min, fromRange.Max, toRange.Min, toRange.Max);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static float[] Scale(this int[] values, IRange<float> toRange)
        {
            return Scale(values, toRange.Min, toRange.Max);
        }

        /// <summary>
        ///   Converts one value from one scale to another scale.
        /// </summary>
        /// 
        public static double Scale(this int value, IRange<int> fromRange, IRange<double> toRange)
        {
            return Scale(value, fromRange.Min, fromRange.Max, toRange.Min, toRange.Max);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static double[] Scale(this int[] values, IRange<int> fromRange, IRange<double> toRange)
        {
            return Scale(values, fromRange.Min, fromRange.Max, toRange.Min, toRange.Max);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static double[] Scale(this int[] values, IRange<double> toRange)
        {
            return Scale(values, toRange.Min, toRange.Max);
        }

        /// <summary>
        ///   Converts one value from one scale to another scale.
        /// </summary>
        /// 
        public static int Scale(this float value, IRange<float> fromRange, IRange<int> toRange)
        {
            return Scale(value, fromRange.Min, fromRange.Max, toRange.Min, toRange.Max);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static int[] Scale(this float[] values, IRange<float> fromRange, IRange<int> toRange)
        {
            return Scale(values, fromRange.Min, fromRange.Max, toRange.Min, toRange.Max);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static int[] Scale(this float[] values, IRange<int> toRange)
        {
            return Scale(values, toRange.Min, toRange.Max);
        }

        /// <summary>
        ///   Converts one value from one scale to another scale.
        /// </summary>
        /// 
        public static float Scale(this float value, IRange<float> fromRange, IRange<float> toRange, bool inPlace = false)
        {
            return Scale(value, fromRange.Min, fromRange.Max, toRange.Min, toRange.Max);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static float[] Scale(this float[] values, IRange<float> fromRange, IRange<float> toRange, bool inPlace = false)
        {
            return Scale(values, fromRange.Min, fromRange.Max, toRange.Min, toRange.Max);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static float[] Scale(this float[] values, IRange<float> toRange, bool inPlace = false)
        {
            return Scale(values, toRange.Min, toRange.Max);
        }

        /// <summary>
        ///   Converts one value from one scale to another scale.
        /// </summary>
        /// 
        public static double Scale(this float value, IRange<float> fromRange, IRange<double> toRange)
        {
            return Scale(value, fromRange.Min, fromRange.Max, toRange.Min, toRange.Max);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static double[] Scale(this float[] values, IRange<float> fromRange, IRange<double> toRange)
        {
            return Scale(values, fromRange.Min, fromRange.Max, toRange.Min, toRange.Max);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static double[] Scale(this float[] values, IRange<double> toRange)
        {
            return Scale(values, toRange.Min, toRange.Max);
        }

        /// <summary>
        ///   Converts one value from one scale to another scale.
        /// </summary>
        /// 
        public static int Scale(this double value, IRange<double> fromRange, IRange<int> toRange)
        {
            return Scale(value, fromRange.Min, fromRange.Max, toRange.Min, toRange.Max);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static int[] Scale(this double[] values, IRange<double> fromRange, IRange<int> toRange)
        {
            return Scale(values, fromRange.Min, fromRange.Max, toRange.Min, toRange.Max);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static int[] Scale(this double[] values, IRange<int> toRange)
        {
            return Scale(values, toRange.Min, toRange.Max);
        }

        /// <summary>
        ///   Converts one value from one scale to another scale.
        /// </summary>
        /// 
        public static float Scale(this double value, IRange<double> fromRange, IRange<float> toRange)
        {
            return Scale(value, fromRange.Min, fromRange.Max, toRange.Min, toRange.Max);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static float[] Scale(this double[] values, IRange<double> fromRange, IRange<float> toRange)
        {
            return Scale(values, fromRange.Min, fromRange.Max, toRange.Min, toRange.Max);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static float[] Scale(this double[] values, IRange<float> toRange)
        {
            return Scale(values, toRange.Min, toRange.Max);
        }

        /// <summary>
        ///   Converts one value from one scale to another scale.
        /// </summary>
        /// 
        public static double Scale(this double value, IRange<double> fromRange, IRange<double> toRange, bool inPlace = false)
        {
            return Scale(value, fromRange.Min, fromRange.Max, toRange.Min, toRange.Max);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static double[] Scale(this double[] values, IRange<double> fromRange, IRange<double> toRange, bool inPlace = false)
        {
            return Scale(values, fromRange.Min, fromRange.Max, toRange.Min, toRange.Max);
        }

        /// <summary>
        ///   Converts values from one scale to another scale.
        /// </summary>
        /// 
        public static double[] Scale(this double[] values, IRange<double> toRange, bool inPlace = false)
        {
            return Scale(values, toRange.Min, toRange.Max);
        }
    }
}