<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension="Generated.cs" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ include file="T4Toolbox.tt" #>
// Accord Math Library
// The Accord.NET Framework
// http://accord-framework.net
//
// Copyright © César Souza, 2009-2017
// cesarsouza at gmail.com
//
//    This library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    This library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with this library; if not, write to the Free Software
//    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
//

// ======================================================================
// This code has been generated by a tool; do not edit manually. Instead,
// edit the T4 template Vector.Range.tt so this file can be regenerated. 
// ======================================================================


namespace Accord.Math
{
    using System;
	using System.Collections.Generic;
    using Accord.Math;

    public static partial class Vector
    {
<# 
    string[] types = { "int", "float", "double", "short", "byte", "sbyte", "long", "decimal", "ulong", "ushort" };

	Func<string, bool> isWhole = (s) =>
	{
		switch (s)
		{
			case "int":
			case "short":
			case "byte":
			case "sbyte":
			case "long":
			case "ulong":
			case "ushort":
				return true;
			case "float":
			case "double":
			case "decimal":
				return false;
		}

		throw new Exception("Unexpected type.");
	};

    foreach (string i in types)
	{
#>

        /// <summary>
        ///   Creates a range vector.
        /// </summary>
        /// 
        public static <#=i#>[] Range(<#=i#> n)
        {
            <#=i#>[] r = new <#=i#>[(int)n]; 
            for (int i = 0; i < r.Length; i++)
                r[i] = (<#=i#>)i;
            return r;
        }

        /// <summary>
        ///   Creates a range vector.
        /// </summary>
        /// 
        public static <#=i#>[] Range(<#=i#> a, <#=i#> b)
        {
            if (a == b)
                return new <#=i#>[] { };

            <#=i#>[] r;

            if (b > a)
            {
                r = new <#=i#>[(int)(b - a)];
                for (int i = 0; i < r.Length; i++)
                    r[i] = (<#=i#>)(a++);
            }
            else
            {
                r = new <#=i#>[(int)(a - b)];
                for (int i = 0; i < r.Length; i++)
                    r[i] = (<#=i#>)(a--);
            }

            return r;
        }

		/// <summary>
        ///   Creates a range enumeration (similar to NumPy's xrange).
        /// </summary>
        /// 
        public static IEnumerable<<#=i#>> EnumerableRange(<#=i#> n)
        {
            for (<#=i#> i = 0; i < n; i++)
                yield return (<#=i#>)i;
        }

        /// <summary>
        ///   Creates a range enumeration (similar to NumPy's xrange).
        /// </summary>
        /// 
        public static IEnumerable<<#=i#>> EnumerableRange(<#=i#> a, <#=i#> b)
        {
            if (a == b)
                yield break;

            if (b > a)
            {
                int n = (int)(b - a);
                for (int i = 0; i < n; i++)
                    yield return (<#=i#>)(a++);
            }
            else
            {
                int n = (int)(a - b);
                for (int i = 0; i < n; i++)
                    yield return (<#=i#>)(a--);
            }
        }

<#
		foreach (string s in types)
		{
			string r = i;
			if (isWhole(i) || !isWhole(s))
				r = s;
			else if (!isWhole(i) || isWhole(s))
				r = i;
			else if (i != s)
				continue;

			if (i == "decimal" ^ s == "decimal")
				continue;
			if (isWhole(i) == isWhole(s) && i != s)
				continue;

			string c = "double";
			if (isWhole(i) && !isWhole(s))
			{
				c = s;
			}
			else if (!isWhole(i) && isWhole(s))
			{
				c = i;
			}
			else if (isWhole(i) && isWhole(s))
			{
				if (i != s)
					continue;
				c = "double";
			}
			else if (!isWhole(i) && !isWhole(s))
			{
				if (i == "decimal" || s == "decimal")
					c = "decimal";
			}
#>

        /// <summary>
        ///   Creates an interval vector.
        /// </summary>
        /// 
        public static <#=r#>[] Range(<#=i#> a, <#=i#> b, <#=s#> stepSize)
        {
            if (a == b)
                return new <#=r#>[] { };

			if (stepSize == 0)
				throw new ArgumentOutOfRangeException("stepSize", "stepSize must be different from zero.");

            <#=r#>[] r;

<# 
			if (s != "ushort" && s != "ulong" && s != "byte") 
			{
#>
			if (a < b)
			{
				if (stepSize < 0)
					throw new ArgumentOutOfRangeException("stepSize", "If a < b, stepSize must be positive.");
			}
			else
			{
				if (stepSize > 0)
					stepSize = (<#=s#>)(-stepSize);
			}

			int steps = (int)System.Math.Ceiling(((<#=c#>)(b - a) / (<#=c#>)stepSize));
            r = new <#=r#>[steps];
            for (uint i = 0; i < r.Length; i++)
                r[i] = (<#=r#>)(a +  i * stepSize);
<#			
			}
			else
			{
#>
			if (a < b)
			{
				int steps = (int)System.Math.Ceiling(((<#=c#>)(b - a) / (<#=c#>)stepSize));
				r = new <#=r#>[steps];
				for (uint i = 0; i < r.Length; i++)
					r[i] = (<#=r#>)(a +  i * stepSize);
			}
			else
			{
				int steps = (int)System.Math.Ceiling(((<#=c#>)(a - b) / (<#=c#>)stepSize));
				r = new <#=r#>[steps];
				for (uint i = 0; i < r.Length; i++)
					r[i] = (<#=r#>)(a -  i * stepSize);
			}
<#
			}
#>

			if (a < b)
			{
				if (r[r.Length - 1] > b)
					r[r.Length - 1] = b;
			}
			else
			{
				if (r[r.Length - 1] > a)
					r[r.Length - 1] = a;
			}

            return r;
        }

        /// <summary>
        ///   Creates an interval enumeration (similar to NumPy's xrange).
        /// </summary>
        /// 
        public static IEnumerable<<#=r#>> EnumerableRange(<#=i#> a, <#=i#> b, <#=s#> stepSize)
        {
            if (a == b)
                yield break;

			if (stepSize == 0)
				throw new ArgumentOutOfRangeException("stepSize", "stepSize must be different from zero.");

            <#=r#> last;

<# 
			if (s != "ushort" && s != "ulong" && s != "byte") 
			{
#>
			if (a < b)
			{
				if (stepSize < 0)
					throw new ArgumentOutOfRangeException("stepSize", "If a < b, stepSize must be positive.");
			}
			else
			{
				if (stepSize > 0)
					stepSize = (<#=s#>)(-stepSize);
			}

			uint steps = (uint)System.Math.Ceiling(((<#=c#>)(b - a) / (<#=c#>)stepSize)) - 1;
            for (uint i = 0; i < steps; i++)
                yield return (<#=r#>)(a +  i * stepSize);
			last = (<#=r#>)(a + steps * stepSize);
<#			
			}
			else
			{
#>
			if (a < b)
			{
				uint steps = (uint)System.Math.Ceiling(((<#=c#>)(b - a) / (<#=c#>)stepSize)) - 1;
				for (uint i = 0; i < steps; i++)
					yield return (<#=r#>)(a +  i * stepSize);
				last = (<#=r#>)(a + steps * stepSize);
			}
			else
			{
				uint steps = (uint)System.Math.Ceiling(((<#=c#>)(a - b) / (<#=c#>)stepSize)) - 1;
				for (uint i = 0; i < steps; i++)
					yield return (<#=r#>)(a -  i * stepSize);
				last = (<#=r#>)(a - steps * stepSize);
			}
<#
			}
#>

			if (a < b)
			{
				yield return last > b ? b : last;
			}
			else
			{
				yield return last > a ? a : last;
			}
        }
<#
		}
	}

    string[] ranges = { "DoubleRange", "Range", "ByteRange", "IntRange" };
    string[] rtypes = { "double", "float", "byte", "int" }; 

    for (int k = 0; k < ranges.Length; k++)
    {
        string i = ranges[k];
        string t = rtypes[k];
#>

        /// <summary>
        ///   Creates an interval vector.
        /// </summary>
        /// 
        public static <#=t#>[] Range(this <#=i#> range)
        {
            return Range(range.Min, range.Max);
        }

<#
		for (int j = 0; j < ranges.Length; j++)
		{
			string s = rtypes[j];

			string r = t;
			if (isWhole(t) && !isWhole(s))
			{
				r = s;
			}
			else if (!isWhole(t) && isWhole(s))
			{
				r = t;
			}
			else if (isWhole(t) && isWhole(s))
			{
				if (t != s)
					continue;
			}
			else if (!isWhole(t) && !isWhole(s))
			{
				if (t == "decimal" || s == "decimal")
					r = "decimal";
				if (t == "double" || s == "double")
					r = "double";
			}
#>
        /// <summary>
        ///   Creates an interval vector.
        /// </summary>
        /// 
        public static <#=r#>[] Range(this <#=i#> range, <#=s#> stepSize)
        {
            return Range(range.Min, range.Max, stepSize);
        }
<#
		}
	}
#>
    }
}